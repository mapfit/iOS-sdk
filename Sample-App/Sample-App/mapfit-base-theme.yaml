# Mapfit Base Theme
# Last updated April 16, 2018

sources:
 mapfit:
  type: MVT
  #url:  https://tiles.mapfit.com/vector/v1/all/{z}/{x}/{y}.mvt
  #url:  https://tiles.mapfit.com/vector/v1/roads,water,places,buildings,landuse,boundaries,transit/{z}/{x}/{y}.mvt
  #roads,water,places,buildings,landuse
  url:  https://tiles2.mapfit.com/vector/v2/all/{z}/{x}/{y}.mvt
  tile_size: 512
  max_zoom: 16


global:
    language: en # optional ISO 2-char code
    # Subway/transit overlay
    sdk_transit_overlay: global.show_transit
    # Building Extrude (3D buildings)
    sdk_building_extrude: global.show_3d_buildings


    ux_language: false
    ux_language_fallback: false
    ux_language_text_source: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.language && feature['name:'+global.language]) || feature.name;
        }
    ux_language_text_source_left: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:left:'+global.ux_language]) || (global.ux_language_fallback && feature['name:left:'+global.ux_language_fallback]) || feature['name:left'];
        }
    ux_language_text_source_right: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:right:'+global.ux_language]) || (global.ux_language_fallback && feature['name:right:'+global.ux_language_fallback]) || feature['name:right'];
        }
    ux_language_text_source_boundary_lines_left_right:
        left: global.ux_language_text_source_left
        right: global.ux_language_text_source_right
    ux_language_text_source_boundary_lines: |
        function() {
            var right = (global.ux_language && feature['name:right:'+global.ux_language]) || (global.ux_language_fallback && feature['name:right:'+global.ux_language_fallback]) || feature['name:right'];
            var left = (global.ux_language && feature['name:left:'+global.ux_language]) || (global.ux_language_fallback && feature['name:left:'+global.ux_language_fallback]) || feature['name:left'];
            if( right && left ) {
                //if( right.includes(' ') || left.includes(' ') ) {
                    return left + " - " + right;
                //} else {
                //    return right + '\n' + left;
                //}
            } else {
                return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
            }
        }
    ux_language_text_source_short: |
        function() {
            return (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
        }
    ux_language_text_source_short_proxy_name: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var short = (global.ux_language && feature['name:short:'+global.ux_language]) || (global.ux_language_fallback && feature['name:short:'+global.ux_language_fallback]) || feature['name:short'];
            return short ? name : '';
        }
    ux_language_text_source_abbreviation: |
        function() {
            var name  = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            var abbrev = (global.ux_language && feature['name:abbreviation:'+global.ux_language]) || (global.ux_language_fallback && feature['name:abbreviation:'+global.ux_language_fallback]) || feature['name:abbreviation'];
            return abbrev || name;
        }
    ux_language_text_source_iata: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.iata) {
                if (name) {
                    return name + ' (' + feature.iata + ')';
                }
                else {
                    return feature.iata;
                }
            } else {
                return name;
            }
        }
    ux_language_text_source_ocean: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join('  ');
        }
    ux_language_text_source_sea: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join(' ');
        }
    ux_language_text_source_continent_stacked_only: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            return name.split(' ').join('\n');
        }
    ux_language_text_source_continent: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'] || '';
            name = name.split(' ').join('\n');
            return name.split('').join(' ');
        }
    ux_language_text_source_road_ref_and_name: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.ref && name) {
                return (feature.ref + ' ' + name);
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_road_ref_and_name_short: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (feature.ref && (feature.ref.length < 6) && name) {
                return feature.ref + ' ' + name;
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_piste_advanced: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆ ' + name) : '◆';
        }
    ux_language_text_source_piste_expert: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            return name ? ('◆◆ ' + name) : '◆◆';
        }
    ux_language_text_source_building_and_address: |
        function() {
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (name && feature.addr_housenumber) {
                return name + '\n' + feature.addr_housenumber;
            } else {
                return name;
            }
        }

    # To facilitate data visualizations several recommended sort orders are provided
    #
    # Your classic raster map overlay.
    # Over all line and polygon features.
    # Under map labels (icons and text), under UI elements
    # (like routeline and search result pins).
    sdk_order_over_everything_but_text_0: 490
    sdk_order_over_everything_but_text_1: 491
    sdk_order_over_everything_but_text_2: 492
    sdk_order_over_everything_but_text_3: 493
    sdk_order_over_everything_but_text_4: 494
    sdk_order_over_everything_but_text_5: 495
    sdk_order_over_everything_but_text_6: 496
    sdk_order_over_everything_but_text_7: 497
    sdk_order_over_everything_but_text_8: 498
    sdk_order_over_everything_but_text_9: 499
    #
    # Your classic "underlay"
    # Under roads. Above borders, water, landuse, and earth.
    sdk_order_under_roads_0: 290
    sdk_order_under_roads_1: 291
    sdk_order_under_roads_2: 292
    sdk_order_under_roads_3: 293
    sdk_order_under_roads_4: 294
    sdk_order_under_roads_5: 295
    sdk_order_under_roads_6: 296
    sdk_order_under_roads_7: 297
    sdk_order_under_roads_8: 298
    sdk_order_under_roads_9: 299
    #
    # Under water.
    # Above earth and most landuse.
    sdk_order_under_water_0: 190
    sdk_order_under_water_1: 191
    sdk_order_under_water_2: 192
    sdk_order_under_water_3: 193
    sdk_order_under_water_4: 194
    sdk_order_under_water_5: 195
    sdk_order_under_water_6: 196
    sdk_order_under_water_7: 197
    sdk_order_under_water_8: 198
    sdk_order_under_water_9: 199
    #
    # Under everything.
    # Tip: disable earth layer.
    sdk_order_under_everything_0: 0
    sdk_order_under_everything_1: 1
    sdk_order_under_everything_2: 2
    sdk_order_under_everything_3: 3
    sdk_order_under_everything_4: 4
    sdk_order_under_everything_5: 5
    sdk_order_under_everything_6: 6
    sdk_order_under_everything_7: 7
    sdk_order_under_everything_8: 8
    sdk_order_under_everything_9: 9
    #
    #
    # SHIELDS
    sdk_shield_color: black
    sdk_shield_text_color: white
    #
    # enable interactivity for key features
    sdk_interactive: true
    #
    #
    #
    # internal variables not recommended for external SDK use
    #
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    #
    #label visibility
    text_visible_continent:         true
    text_visible_admin:             true
    text_visible_populated_places:  true
    icon_visible_populated_places:  true
    text_visible_neighbourhoods:    true
    text_visible_neighbourhoods_e:  true
    text_visible_building:          false     # false for default
    text_visible_address:           false     # false for default
    text_visible_water_labels:      true
    text_visible_island:            true
    label_visible_landuse_green:    true
    icon_visible_landuse_green:     true    # needs work
    text_visible_landuse_green:     true
    icon_size_green:                [[0, '0px']]      # 0px for no, default, more  [[13, 14px], [16, 18px], [18, 19px]]
    icon_size_green_l:              [[0, '0px']]      # 0px for no, default, more  [[14,24px],[16,32px]]
    label_visible_poi_landuse:      true
    icon_visible_poi_landuse:       false     # false for default
    text_visible_poi_landuse:       false     # false for default
    label_visible_poi_landuse_e:    true
    icon_visible_poi_landuse_e:     false     # false for default
    text_visible_poi_landuse_e:     true
    text_visible_landuse_generic:   false     # false for default
    label_visible_station:          false     # false for default
    icon_visible_station:           false     # false for default
    text_visible_station:           false     # false for default
    text_visible_highway:           true
    text_visible_highway_e:         false     # false for default, false for more
    text_visible_trunk_primary:     true
    text_visible_trunk_primary_route: true        # true by default
    text_visible_trunk_primary_e2:  false     # false for default, false for more
    text_visible_trunk_primary_e:   false     # false for default, false for more
    text_visible_secondary:         true
    text_visible_secondary_e:       false     # false for default, false for more
    text_visible_tertiary:          true
    text_visible_tertiary_e:        false     # false for default, false for more
    text_visible_minor_road:        true
    text_visible_minor_road_e:      true
    text_visible_service_road:      true
    text_visible_path:              true
    text_visible_piste:             true
    text_visible_steps:             true
    text_visible_aerialway:         true
    text_visible_airport_gate:      true
    sdk_road_shields:               true
    text_visible_exits:             true
    text_visible_exits_e:           false     # false for default, false for more
    #
    #label styling



    ####### ALL COLOR VARIABLES #######

    # TEXT
    text_fill:	                    rgba(90, 95, 105, 1)
    text_outline:	                  rgba(255, 255, 255,.75)
    text_fill_neighborhoods:        rgba(143, 156, 179, 1)
    text_fill_water:	              rgba(71, 123, 198, 1)
    text_outline_water:	            rgba(255, 255, 255,.75)
    text_fill_parks:	              rgba(67, 162, 84, 1)
    text_outline_parks:	            rgba(189, 222, 197, 1)
    text_beach_fill:                rgba(153, 144, 92, 1)
    text_beach_outline:             rgba(255, 255, 255,.75)
    text_highway_fill:              rgba(109, 51, 4, 1)
    text_highway_outline:           rgba(255, 255, 255,.75)
    text_highway_exits:	            rgba(237, 152, 6, 1)
    text_signs_fill:                rgba(255, 255, 255, 1)
    text_address_fill:              rgba(115, 131, 156, 1)
    text_address_outline:           rgba(255, 255, 255,.75)
    text_building_fill:             rgba(115, 131, 156, 1)
    text_building_outline:          rgba(255, 255, 255,.75)

    # ROADS
    highway_fill:	                  rgba(255, 224, 115, 1)
    highway_outline:	              rgba(255, 202, 112,1)
    road_fill:	                    rgba(255, 255, 255,1)
    road_outline:	                  rgba(223, 223, 223,1)
    tunnel_fill:                    rgba(223, 223, 223,1)
    tunnel_outline:                 rgba(223, 223, 223,1)
    road_directional_arrows_fill:   rgba(240, 240, 240,1)
    pedestrian_path_fill:	        rgba(255, 255, 255,1)
    pedestrian_path_outline:        rgba(255, 255, 255,1)
    pedestrian_paths_in_park_fill:  rgba(163,204,163,1)
    pedestrian_paths_in_universities_fill: rgba(219, 203, 152,1)
    pedestrian_steps_fill:          rgba(242, 242, 242,1)
    roads_in_park_fill:           	rgba(255, 255, 255,1)
    roads_in_cemetary_fill:       	rgba(255, 255, 255,1)

    # WATER
    ocean_fill:	                    rgba(137, 208, 255,1)
    water_fill:	                    rgba(137, 208, 255,1)

    # LAND
    map_background_fill:            rgba(255, 255, 255,1)
    land_fill:	                    rgba(242, 242, 242,1)
    parks_fill:	                    rgba(184, 233, 164,1)
    cemetary_fill:	                rgba(205, 238, 193,1)
    protected_area_fill:	          rgba(238, 237, 235,1)
    special_parks_fill:	            rgba(162, 223, 139,1)
    stadium_fill:	                  rgba(191, 176, 142,1)
    playground_fill:	              rgba(215, 204, 176,1)
    beach_fill:	                    rgba(235, 235, 201,1)
    military_fill:                  rgba(207, 209, 221,1)

    # BUILDINGS
    building_fill:	                rgba(235, 235, 235,1)
    building_outline:	              rgba(230, 230, 230,1)

    # AIRPORTS
    airport_road_fill:	            rgba(192, 195, 214,1)
    airport_land_fill:	            rgba(207, 209, 221,1)

    # EDUCATION
    university_fill:	              rgba(238, 227, 180,1)
    school_fill:	                  rgba(242, 242, 242,1)

    # HOSPITALS
    hospital_fill:	                rgba(231, 204, 213,1)

    # FEATURES
    ferry_fill:	                    rgba(124, 170, 203,1)
    railways_fill:	                rgba(223, 223, 223,1)
    special_pedestrian_area_fill:	  rgba(249, 246, 241,1)
    parking_fill:                   rgba(249, 246, 241,1)
    urbanization_fill:              rgba(217, 196, 165,1)
    winter_sports_area_fill:      	rgba(236, 235, 232,1)
    tourism_area_fill:            	rgba(249, 246, 241,1)

    # BOUNDARIES
    region_boundary_fill:	          rgba(153, 153, 153,1)
    city_wall_fill:	                rgba(217, 196, 165,1)

    # POLYGONS & POLYLINES
    polyline_fill:                  rgba(0, 158, 255, 1)
    polygon_fill:                   rgba(214, 239, 255,0.5)
    polygon_outline:                rgba(0, 158, 255, 1)

    # SKI SLOPES
    piste_easy:                     rgba(124, 170, 203,1)
    piste_intermediate:             rgba(124, 170, 203,1)
    piste_advanced:                 rgba(124, 170, 203,1)
    piste_expert:                   rgba(124, 170, 203,1)


    ####### FONT SETTINGS #######

    text_font_family:  'Open Sans'        # Refer to documentation for latest font options


    ####### ALL SHOW/HIDE VARIABLES #######

    show_transit:                   true                # public transit visibility
    show_3d_buildings:              false                # 3D building visibility
    show_airports:                  true                 # airport visibility
    show_urbanization:              false                # show urbanized areas
    show_special_areas:             true                 # show commercial, retail, pedestrian areas
    show_parking_areas:             true                 # show parking areas
    show_staircases:                false                # staircase visibility
    show_winter_sports_area:        false                 # winter sports visibility

    ########## UNUSED ITEMS ##########

    townspot_sprite:    townspot-l-rev     # depends on land color and text settings

# CAMERA OPTIONS (IF 3D BUILDINGS ARE ON)

cameras:
    master:
        type: perspective
        axis: [0, .5]
        max_tilt: 60
        active: true
        vanishing_point: [0, -250px]
# lights:
#     light1:
#         type: point
#         direction: [1, 5, 0]
#         diffuse: .35
#         ambient: .65

textures:
    pois:
        url: https://cdn.mapfit.com/v2-3/themes/images/refill@2x.png
        # url: images/refill@2x.png

        filtering: mipmap
        sprites:
            # define sprites: [x origin, y origin, width, height]
            'US:CA-1char': [488, 642, 82, 92]
            'US:CA-2char': [388, 642, 94, 94]
            'US:CA-3char': [268, 642, 112, 92]
            'US:CA-4char': [136, 642, 124, 92]
            'US:CA-5char': [0, 642, 128, 92]
            'US:I-1char': [908, 745, 88, 100]
            'US:I-2char': [798, 745, 102, 100]
            'US:I-3char': [658, 745, 134, 100]
            'US:I-4char': [512, 745, 140, 100]
            'US:I-5char': [352, 745, 152, 100]
            'US:NY-1char': [756, 386, 72, 88]
            'US:NY-2char': [660, 386, 88, 88]
            'US:NY-3char': [548, 386, 104, 86]
            'US:NY-4char': [424, 388, 116, 84]
            'US:NY-5char': [296, 386, 120, 86]
            'US:PA-1char': [216, 386, 72, 88]
            'US:PA-2char': [120, 386, 88, 88]
            'US:PA-3char': [0, 386, 112, 88]
            'US:PA-4char': [892, 254, 120, 88]
            'US:PA-5char': [756, 254, 128, 88]
            'US:US-1char': [256, 746, 88, 94]
            'US:US-2char': [144, 746, 106, 94]
            'US:US-3char': [0, 746, 138, 100]
            'US:US-4char': [748, 642, 156, 100]
            'US:US-5char': [576, 642, 164, 100]
            arrow: [368, 210, 38, 38]
            capital-l: [590, 210, 32, 32]
            capital-m: [558, 210, 24, 24]
            capital-s: [528, 210, 20, 20]
            capital-xl: [678, 210, 42, 36]
            capital-xs: [506, 210, 16, 16]
            county_shield-1char: [404, 478, 72, 72]
            county_shield-2char: [300, 478, 96, 72]
            county_shield-3char: [160, 478, 132, 72]
            county_shield-4char: [0, 478, 152, 72]
            county_shield-5char: [836, 386, 180, 72]
            generic_shield-1char: [104, 554, 72, 72]
            generic_shield-2char: [0, 554, 98, 72]
            generic_shield-3char: [832, 478, 132, 72]
            generic_shield-4char: [672, 478, 152, 72]
            generic_shield-5char: [484, 478, 180, 72]
            sdk_shield-1char: [832, 554, 84, 84]
            sdk_shield-2char: [712, 554, 112, 84]
            sdk_shield-3char: [560, 554, 144, 84]
            sdk_shield-4char: [384, 554, 168, 84]
            sdk_shield-5char: [184, 554, 192, 84]

            townspot-l: [978, 210, 32, 32]
            townspot-l-rev: [806, 210, 32, 32]
            townspot-m: [946, 210, 24, 24]
            townspot-m-rev: [774, 210, 24, 24]
            townspot-s: [918, 210, 20, 20]
            townspot-s-rev: [746, 210, 20, 20]
            townspot-xl: [0, 254, 40, 40]
            townspot-xl-rev: [846, 210, 38, 38]
            townspot-xs: [894, 210, 16, 16]
            townspot-xs-rev: [726, 210, 12, 12]
            ux-current-location: [342, 254, 88, 88]
            ux-locate-off: [676, 254, 72, 72]
            ux-locate-on: [596, 254, 72, 72]
            ux-route-arrow: [48, 254, 128, 128]
            ux-route-start: [262, 254, 72, 92]
            ux-route-stop: [184, 254, 72, 92]
            ux-search-active: [436, 254, 72, 108]
            ux-search-inactive: [516, 254, 72, 108]
            ux-transit-stop: [630, 212, 42, 36]
styles:
    dashed:
        base: lines
        dash: [1.25, 1.25]
        dash_background_color: [0.749,0.749,0.749]
    dashed_big:
        base: lines
        dash: [2.0, 1.0]
        dash_background_color: [0.749,0.749,0.749]
    dashed_steps:
        base: lines
        dash: [0.25, 0.25]
        dash_background_color: [0.749,0.749,0.749]
    lines_transparent:
        base: lines
        blend: overlay
    # outline_transparent:
    #     base: lines
    #     blend: overlay
    polygons_transparent:
        base: polygons
        blend: overlay
    icons:
        base: points
        texture: pois
        blend_order: 1
    text-blend-order:
        base: text
        blend_order: 1
    ux-route-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    ux-route-line-dash-overlay:
        base: lines
        blend: overlay
        blend_order: 0
        dash: [2, 1]
    ux-transit-line-overlay:
        base: lines
        blend: overlay
        blend_order: 0
    ux-location-gem-overlay:
        base: points
        texture: pois
        blend: overlay
        blend_order: 2
    ux-icons-overlay:
        base: points
        texture: pois
        blend: overlay
        blend_order: 3
    sdk-point-overlay:
        base: points
        texture: pois
        blend: overlay
        blend_order: 3
    sdk-shield-overlay:
        base: points
        texture: pois
        blend: overlay
        blend_order: 3
    sdk-line-overlay:
        base: lines
        blend: translucent
        blend_order: 2
    sdk-polygon-overlay:
        base: polygons
        blend: translucent
        blend_order: 2

fonts:
    Open Sans:
        # - weight: 300
        #   url: fonts/OpenSans-Light.woff
        - weight: normal
          url: fonts/OpenSans-Regular.woff
        - weight: normal
          style: italic
          url: fonts/OpenSans-Italic.woff
        # - weight: 600
        #   url: fonts/OpenSans-Semibold.woff
        # - weight: 600
        #   style: italic
        #   url: fonts/OpenSans-SemiboldItalic.woff
        - weight: bold
          url: fonts/OpenSans-Bold.woff
    # Montserrat:
    #     - weight: normal
    #       url: fonts/Montserrat-Regular.woff

scene:
    background:
        color: global.land_fill

layers:
    mz_route_line:
        data: { source: mapfit }
        draw:
            ux-route-line-overlay:
                interactive: global.sdk_interactive
                color: black
                order: 500
                width: [[0,3.5px],[5,5px],[9,7px],[10,6px],[11,6px],[13,8px],[14,9px],[15,10px],[16,11px],[17,12px],[18,10px]]
    mz_route_line_dash:
        data: { source: mapfit }
        draw:
            ux-route-line-dash-overlay:
                interactive: global.sdk_interactive
                color: '#06a6d4'
                order: 500
                width: [[2,2px],[5,2.5px],[11,3px],[16,7px],[17,9px]]
    mz_route_line_transit:
        data: { source: mz_route_line_transit }
        draw:
            ux-transit-line-overlay:
                # each transit route segment could be a different "line" each with it's own color
                # but some transit lines don't define a color, in those cases default to blue
                # and since the color is coming from Transit.land they call it "color" instead of "colour"
                interactive: global.sdk_interactive
                color: function() { return feature.color || '#06a6d4'; }
                order: 500
                width: [[0,3.5px],[5,5px],[9,7px],[10,6px],[11,6px],[13,8px],[14,9px],[15,10px],[16,11px],[17,12px],[18,10px]]
    mz_current_location_gem:
        data: { source: mz_current_location }
        draw:
            ux-location-gem-overlay:
                interactive: global.sdk_interactive
                sprite: ux-current-location
                size: 36px
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_location:
        data: { source: mz_route_location }
        draw:
            ux-location-gem-overlay:
                interactive: global.sdk_interactive
                sprite: ux-route-arrow
                size: [60px,60px]
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_start:
        data: { source: mz_route_start }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                priority: 1
                sprite: ux-route-start
                size: [36px,46px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_stop:
        data: { source: mz_route_stop }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                priority: 1
                sprite: ux-route-stop
                size: [36px,46px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_route_transit_stop:
        data: { source: mz_route_transit_stop }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                sprite: ux-transit-stop
                size: [15px,15px]
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_search_result:
        data: { source: mz_search_result }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
        inactive:
            filter: { state: inactive }
            draw:
                ux-icons-overlay:
                    sprite: ux-search-inactive
    mz_dropped_pin:
        data: { source: mz_dropped_pin }
        draw:
            ux-icons-overlay:
                interactive: global.sdk_interactive
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }

    # Used by the SDK to place point, line, and polygon overlays on the map
    mz_default_point:
        data: { source: mz_default_point }
        draw:
            sdk-point-overlay:
                interactive: global.sdk_interactive
                sprite: ux-search-active
                size: [36px,54px]
                collide: false
                anchor: top
                transition: { show: { time: 0s }, hide: { time: 0s } }
    mz_default_shield:
        data: { source: mz_default_shield }
        draw:
            sdk-shield-overlay:
                interactive: global.sdk_interactive
                sprite: |
                    function() {
                        if( feature.ref ) {
                            return ('sdk_shield-' + feature.ref.length + 'char');
                        } else {
                            return ('sdk_shield-' + feature.name.length + 'char');
                        }
                    }
                sprite_default: sdk_shield-1char
                color: global.sdk_shield_color
                collide: false
                transition: { show: { time: 0s }, hide: { time: 0s } }
                text:
                    # offset: [0px, -1px]
                    text_source: |
                        function() {
                            if( feature.ref ) {
                                return feature.ref;
                            } else {
                                return feature.name;
                            }
                        }
                    anchor: center
                    font:
                        family: Montserrat
                        fill: global.sdk_shield_text_color
                        style: bold
                        size: [[7,7px],[12,8px],[16,11px]]

        width_1char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 1);
                    } else {
                        return (feature.name.length === 1);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[16px,16px]],[13,[18px,18px]],[16,[21px,21px]]]
        width_2char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 2);
                    } else {
                        return (feature.name.length === 2);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[21px,16px]],[13,[24px,18px]],[16,[28px,21px]]]
        width_3char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 3);
                    } else {
                        return (feature.name.length === 3);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[27px,16px]],[13,[31px,18px]],[16,[36px,21px]]]
        width_4char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 4);
                    } else {
                        return (feature.name.length === 4);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[32px,16px]],[13,[36px,18px]],[16,[41px,21px]]]
        width_5char:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length === 5);
                    } else {
                        return (feature.name.length === 5);
                    }
                }
            draw:
                sdk-shield-overlay:
                    size: [[6,[37px,16px]],[13,[41px,18px]],[16,[48px,21px]]]
        # this is kinda a hack
        width_longggggg:
            filter: |
                function() {
                    if( feature.ref ) {
                        return (feature.ref.length > 5);
                    } else {
                        return (feature.name.length > 5);
                    }
                }
            draw:
                sdk-shield-overlay:
                    visible: false
    mz_default_line:
        data: { source: mz_default_line }
        draw:
            sdk-line-overlay:
                interactive: global.sdk_interactive
                color: global.polyline_fill
                order: 503
                width: 2px
                outline:
                    width: 0px
                    color: white
    mz_default_polygon:
        data: { source: mz_default_polygon }
        draw:
            sdk-polygon-overlay:
                interactive: global.sdk_interactive
                color: global.polygon_fill
                order: 501
                outline:
                    width: 0px
                    color: white
            sdk-line-overlay:
                color: global.polygon_outline
                order: 502
                width: 2px
                outline:
                    width: 0px
                    color: white

    earth-labels:
        data: { source: mapfit, layer: earth }
        filter:
            name: true
        draw:
            text-blend-order:
                text_source: global.ux_language_text_source
        continent:
            filter: { kind: [continent], $zoom: {max: 5} }
            draw:
                text-blend-order:
                    visible: global.text_visible_continent
                    text_source: global.ux_language_text_source_continent_stacked_only
                    text_wrap: false
                    font:
                        family: global.text_font_family
                        size: [[1,11px],[3,14px]]
                        style: italic
                        fill: global.text_fill
                        weight: normal
                        transform: uppercase
            continent-spacer:
                filter: { $zoom: { min: 2 } }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source_continent
        island:
            filter: { kind: [archipelago, island, islet] }
            draw:
                text-blend-order:
                    visible: global.text_visible_island
                    text_wrap: 10
                    font:
                        family: global.text_font_family
                        size: 12px
                        style: italic
                        fill: global.text_fill
                        weight: normal
                        stroke: { color: global.text_outline, width: 4 }

    earth:
        data: { source: mapfit, layer: landuse }
        draw:
            polygons:
                order: global.feature_order
            lines:
                order: global.feature_order

        landuse-labels:
            filter:
                all:
                    - label_placement: true
                    - name: true
                    - $zoom: { min: 16 }
            draw:
                text-blend-order:
                    text_source: global.ux_language_text_source
                    #interactive: true
                    move_into_tile: true
                    priority: 100
                    visible: global.text_visible_landuse_generic
                    font:
                        fill: '#666'
                        family: global.text_font_family
                        style: italic
                        size: 11px
                        stroke: { color: global.text_address_outline, width: 1 }

        tier1:

            national_park:
                filter:
                    all:
                        - kind: [national_park, battlefield, protected_area]
                    any:
                        - not: { operator: [ "United States Forest Service" ] }
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        color: global.parks_fill
                        # todo: what is this?
                        order: 18
                        visible: true
                us_national_park:
                    # yosemite national park, death valley national park, grand canyon national park
                    filter:
                        any:
                            - operator: [ "United States National Park Service" ]
                            - protect_class: ['2','3','5']
                    draw:
                        polygons:
                            color: global.parks_fill
                            visible: true
        tier2:

            conservation:
                filter:
                    $zoom: { min: 4 }
                    kind: [protected_area, nature_reserve, national_park]
                    not: { protect_class: [2,3,5]}
                draw:
                    # pixel-pattern-light:
                    #     #order: 33 #25
                    #     visible: true

                    polygons:
                        color: [[5, global.parks_fill],[8, global.parks_fill]]
                        visible: true


            national_forest_level_6:
                filter:
                    all:
                        - kind: forest
                    any:
                        - protect_class: ['6']
                        - operator: ['United States Forest Service']
                draw:
                    polygons:
                        color: global.parks_fill
                        visible: true
                    # lines:
                    #     color: global.land_fill
                    #     width: 2px

            parks-and-national-forests-not-national-park:
                filter:
                    all:
                        - $zoom: { min: 4 }
                        - kind: [park, national_park]
                    any:
                        - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                        - not: { protect_class: ['2','3','5','6'] }
                # default for national forests and more?
                draw:
                    polygons:
                        color: global.parks_fill
                        visible: true
                    # lines:
                    #     color: global.land_fill
                    #     width: [[7,0px],[8,1px],[10,2px]]
                national_park:
                    #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                    filter:
                        all:
                            - kind: national_park
                            - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                    draw:
                        polygons:
                            visible: true
            # gotta be a protected area to draw green, not just a landcover type
            farm:
                filter:
                    kind: [farm, farmland]
                    $zoom: { min: 10}
                draw:
                    # polygons:
                    #     color: [ [10, global.green4], [12, global.green5] ]
                    #     visible: global.green4_v

            forest:
                filter: { kind: [forest, wood, natural_forest, natural_park], $zoom: { min: 10 }, not: { operator: [ "United States Forest Service"] } }
                draw:
                    polygons:
                        color: global.parks_fill
                        visible: true
                    # lines:
                    #     order: 28
                    #     color: global.land_fill
                    #     width: 2px
        urban:
                filter: { kind: [urban, rural, residential] }
                visible: global.show_urbanization
                draw:
                    polygons:
                        color: [[0, global.urbanization_fill],[9, global.urbanization_fill]]
                        visible: global.show_urbanization
        tier3:
            airport:
                filter:
                    kind: aerodrome
                draw:
                    polygons:
                        color: global.airport_land_fill
                        visible: global.show_airports
            military:
                filter:
                    kind: military
                draw:
                    polygons:
                        color: global.military_fill
            university:
                filter:
                    kind: [university, college]
                draw:
                    polygons:
                        color: global.university_fill
        tier4:
            cemetery:
                filter:
                    kind: cemetery
                draw:
                    polygons:
                        #order: 11
                        color: global.cemetary_fill
            commercial:
                filter:
                    kind: commercial
                draw:
                    polygons:
                        color: global.special_pedestrian_area_fill
                        visible: global.show_special_areas
            golf_course:
                filter:
                    kind: golf_course
                draw:
                    polygons:
                        color: global.parks_fill
            hospital:
                filter:
                    kind: hospital
                draw:
                    polygons:
                        color: global.hospital_fill
            industrial:
                filter:
                    kind: industrial
                draw:
                    polygons:
                        color: global.land_fill
            power:
                filter: { kind: [plant, generator, substation] }
                draw:
                    polygons:
                        color: global.land_fill
            railway:
                filter:
                    kind: railway
                draw:
                    polygons:
                        color: global.land_fill
            sports_centre:
                filter:
                    kind: sports_centre
                draw:
                    polygons:
                        color: global.cemetary_fill
            recreation_ground:
                filter:
                    kind: recreation_ground
                draw:
                    polygons:
                        color: global.playground_fill
            retail:
                filter:
                    kind: retail
                draw:
                    polygons:
                        color: global.special_pedestrian_area_fill
                        visible: global.show_special_areas
            stadium:
                filter:
                    kind: stadium
                draw:
                    polygons:
                        color: global.stadium_fill
            zoo:
                filter:
                    kind: [zoo, wildlife_park]
                draw:
                    polygons:
                        color: global.cemetary_fill
            winter_sports:
                filter:
                    kind: winter_sports
                draw:
                    polygons:
                        color: global.winter_sports_area_fill
                        visible: global.show_winter_sports_area
            man-made:
                filter: { kind: [pier,wastewater_plant,works,bridge,tower,breakwater,water_works,groyne,dike,cutline] }
                draw:
                    polygons:
                        color: global.land_fill
                pier:
                    filter: { kind: [pier,bridge,breakwater,groyne,dike,cutline] }
                    draw:
                        polygons:
                            color: global.land_fill
        tier5:
            tourism-related:
                filter:
                    kind:
                        - theme_park
                        - resort
                        - aquarium
                        - winery
                        - maze
                draw:
                    polygons:
                        color: global.tourism_area_fill
            beach:
                filter:
                    kind: beach
                draw:
                    polygons:
                        color: global.beach_fill
        tier6:
            garden:
                filter:
                    kind: garden
                draw:
                    polygons:
                        color: global.cemetary_fill
            parking:
                filter:
                    all:
                        - kind: parking
                        - $zoom: { min: 14 }
                    any:
                        - { $zoom: [14,15,16], area: { min: 70000 } }
                        - { $zoom: [14,15,16], volume: { min: 70000 } }
                        - { $zoom: { min: 14 } } #16.5 is preferred
                draw:
                    polygons:
                        color: global.parking_fill
                        visible: global.show_parking_areas
                early:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        polygons:
                            color: global.parking_fill
            pedestrian:
                filter:
                    kind: [pedestrian,common,footway]
                draw:
                    polygons:
                        color: global.special_pedestrian_area_fill
                        visible: global.show_special_areas
                green-stuff:
                    filter:
                        surface: [grass]
                    draw:
                        polygons:
                            color: global.cemetary_fill
            pitch:
                filter: { kind: pitch }
                draw:
                    polygons:
                        color: global.parks_fill
                    # outline:
                    #     style: lines
                    #     order: global.feature_order
                    #     color: global.parks_fill
                    #     width: [[14,0px],[15,1px],[16,1m]]
            # place_of_worship:
            #     filter:
            #         kind: place_of_worship
            #     draw:
            #         polygons:
            #             color: global.special_pedestrian_area_fill
            #             visible: global.show_special_areas
            playground:
                filter:
                    kind: playground
                draw:
                    polygons:
                        color: global.parks_fill
            school:
                filter:
                    kind: school
                draw:
                    polygons:
                        color: global.school_fill
            minor-landuse:
                filter:
                    kind:
                        - attraction
                        - artwork
                        - wilderness_hut
                        - hanami
                draw:
                    polygons:
                        color: global.tourism_area_fill
                    # outline:
                    #     style: lines
                    #     order: global.feature_order
                    #     color: global.tourism_area_fill
                    #     width: [[14,0px],[15,1px],[16,0.5m]]

        landuse-not-filtered:
            # runways and taxiways are also in the roads layer as lines
            # these ones are probably duplicate features, but have AREA (a good thing)
            filter:
                kind:
                    - runway
                    - apron
                    - roller_coaster
                    - amusement_ride
                    - summer_toboggan
                    - trail_riding_station
                    - water_slide
                    - carousel
                    - animal
                    - enclosure
                    - petting_zoo
                    - aviary
            draw:
                polygons:
                    order: global.feature_order
            runway:
                filter:
                    kind: runway
                draw:
                    polygons:
                        color: global.airport_road_fill
            apron:
                filter:
                    kind: apron
                    $zoom: { min: 15}
                draw:
                    polygons:
                        color: global.airport_land_fill
                        visible: global.show_airports
            minor-amusement-park-landuse:
                filter:
                    kind:
                        - roller_coaster
                        - amusement_ride
                        - summer_toboggan
                        - trail_riding_station
                        - water_slide
                        - carousel
                draw:
                    polygons:
                        color: global.tourism_area_fill
                        visible: true
                    # outline:
                    #     style: lines
                    #     order: global.feature_order
                    #     color: global.tourism_area_fill
                    #     width: [[14,0px],[15,1px],[16,0.5m]]
            minor-zoo-landuse:
                filter:
                    kind:
                        - animal
                        - enclosure
                        - petting_zoo
                        - aviary
                draw:
                    polygons:
                        color: global.cemetary_fill
                        visible: true
                    outline:
                        style: lines
                        order: global.feature_order
                        color: global.cemetary_fill
                        width: [[14,0px],[15,1px],[16,0.5m]]


        city_walls:
            filter: { kind: city_wall_fill }
            draw:
                lines:
                    color: global.city_wall_fill
                    width: [[12, 0.75px], [13, 1.0px], [14, 1.2px], [15, 2.0px], [16, 2.5px], [19, 5m]]

    water:
        data: { source: mapfit, layer: water }
        ocean-water:
            # don't filter ocean polys because OSM ocean split tiles don't have coherent areas
            filter: { kind: ocean }
            draw:
                polygons:
                    order: global.feature_order
                    color: global.ocean_fill
            # water_boundaries-ocean:
            #     filter: { boundary: true, $zoom: { min: 10 } }
            #     draw:
            #         lines:
            #             order: global.feature_order
            #             color: global.water1_o
            #             width: [[10,1px],[12,2px]]
            #             join: round

        water-not-ocean:
            filter: { not: { kind: ocean } }
            draw:
                polygons:
                    order: global.feature_order
                    color: global.water_fill
            inland-water:
                filter:
                    all:
                        - kind: [lake, water, riverbank, reservoir, playa, swimming_pool]
                    any:
                        # limit show smaller landuse areas to higher zooms
                        - { $zoom: { min: 1 },  area: { min: 40000000000 } }
                        - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                        # some weird natural earth scale set transition
                        - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                        - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                        - { $zoom: { min: 5 },  area: { min: 700000000 } }
                        - { $zoom: { min: 6 },  area: { min: 500000000 } }
                        - { $zoom: { min: 7 },  area: { min: 160000000 } }
                        - { $zoom: { min: 8 },  area: { min: 40000000 } }
                        - { $zoom: { min: 9 },  area: { min: 10000000 } }
                        - { $zoom: { min: 10 }, area: { min: 8000000 } }
                        - { $zoom: { min: 11 }, area: { min: 2000000 } }
                        - { $zoom: { min: 12 }, area: { min: 200000 } }
                        - { $zoom: { min: 13 }, area: { min: 100000 } }
                        - { $zoom: { min: 14 }, area: { min: 5000 } }
                        - { $zoom: { min: 15 } }
                draw:
                    polygons:
                        visible: true
                        color: global.water_fill
            other-water-areas:
                filter: { not: { kind: [lake, water, reservoir, playa] }, $zoom: { min: 11 }, area: { min: 100 } }
                draw:
                    polygons:
                        visible: true
                        color: global.water_fill
            playas:
                filter: { kind: playa }
                draw:
                    polygons:
                        order: function() { return feature.sort_rank + 1; }
                        color: global.water_fill
            # water_boundaries-not-ocean:
            #     filter:
            #         all:
            #             - boundary: true
            #             - $zoom: { min: 14 }
            #         any:
            #             - { $zoom: { min: 14 }, area: { min: 2000 } }
            #             - { $zoom: { min: 15 } }
            #     draw:
            #         lines:
            #             order: global.feature_order
            #             color: global.water2_o
            #             width: [[14,1.0px],[16,1.5px],[18,2m]]
            #             join: round
            river:
                filter: { kind: [river,canal,stream,dam,ditch,drain], $zoom: { min: 13 } }
                draw:
                    lines:
                        order: global.feature_order
                        color: global.water_fill
                        width: [[13,0.5px],[14,1.0px],[16,1.5px],[18,4m]]
                        join: bevel
                        cap: round

        water-labels:
            filter:
                all:
                    - name: true
                    - function() { return global.text_visible_water_labels; }
            water-area-labels:
                filter:
                    all:
                        - $geometry: point
                        - not: { kind: [riverbank, dock, playa] }
                        - area: true
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: { min: 5 },  area: { min: 10000000000 } }
                        - { $zoom: { min: 6 },  area: { min: 5000000000 } }
                        - { $zoom: { min: 7 },  area: { min: 400000000 } }
                        - { $zoom: { min: 8 },  area: { min: 200000000 } }
                        - { $zoom: { min: 9 },  area: { min: 100000000 } }
                        - { $zoom: { min: 10 }, area: { min: 100000000 } }
                        - { $zoom: { min: 11 }, area: { min: 10000000 } }
                        - { $zoom: { min: 12 }, area: { min: 2000000 } }
                        - { $zoom: { min: 13 }, area: { min: 1000000 } }
                        - { $zoom: { min: 14 }, area: { min: 500000 } }
                        - { $zoom: { min: 15 }, area: { min: 100000 } }
                        - { $zoom: { min: 15 }, area: { min: 50000 } }
                        - { $zoom: { min: 16 }, area: { min: 20000 } }
                        - { $zoom: { min: 17 } }
                default-label-text:
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source
                            font:
                                fill: global.text_fill_water
                                family: global.text_font_family
                                style: italic
                                weight: normal
                                size: 12px
                lakes-labels:
                    filter:
                        $zoom: { min: 4 }
                    draw:
                        text-blend-order:
                            font:
                                size: [[5,9px],[8,12px]]

            ocean-sea-labels:
                filter:
                    kind: [sea, ocean]
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source
                        font:
                            fill: global.text_fill_water
                            family: global.text_font_family
                            style: italic
                            weight: normal
                            size: 12px
                            transform: uppercase

                ocean-spacer:
                    filter: { kind: ocean }
                    ocean-spacer-z1-z4:
                        filter: { $zoom: { min: 1, max: 4 } }
                        draw:
                            text-blend-order:
                                text_source: global.ux_language_text_source_sea
                                text_wrap: false
                    ocean-spacer-z4-up:
                        filter: { $zoom: { min: 4 } }
                        draw:
                            text-blend-order:
                                text_source: global.ux_language_text_source_ocean
                                text_wrap: false
                ocean-labels:
                    draw:
                        text-blend-order:
                            font:
                                size: [[1,8px],[2,10px],[3,13px],[4,16px]]

                sea-early:
                    filter: { $zoom: [3], kind: sea }
                    draw: { text-blend-order: { visible: false } }
                sea-spacer:
                    filter: { not: { kind: [ocean] }, $zoom: { min: 5 } }
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_sea
                            text_wrap: false

                sea-labels:
                    filter: { not: { kind: [ocean] } }
                    draw:
                        text-blend-order:
                            font:
                                fill: global.text_fill_water
                                size: [[4,8px],[6,11px],[8,14px]]

            playa-labels:
                filter:
                    all:
                        - $geometry: point
                        - kind: playa
                        - area: true
                    any:
                        # show labels for smaller landuse areas at higher zooms
                        - { $zoom: { min: 7 },  area: { min: 1500000000 } }
                        - { $zoom: { min: 8 },  area: { min: 200000000 } }
                        # feature no longer available in switch from NE to OSM
                        - { $zoom: { min: 9 },  area: { min: 100000000 } }
                        - { $zoom: { min: 10 }, area: { min: 100000000 } }
                        - { $zoom: { min: 11 }, area: { min: 10000000 } }
                        - { $zoom: { min: 12 }, area: { min: 2000000 } }
                        - { $zoom: { min: 13 }, area: { min: 1000000 } }
                        - { $zoom: { min: 14 }, area: { min: 500000 } }
                        - { $zoom: { min: 15 }, area: { min: 100000 } }
                        - { $zoom: { min: 15 }, area: { min: 50000 } }
                        - { $zoom: { min: 16 }, area: { min: 20000 } }
                        - { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source
                        font:
                            fill: grey
                            family: global.text_font_family
                            style: italic
                            weight: normal
                            size: 12px
                            stroke: { color: global.text_outline_water, width: 3 }
                # debug only
        #        icons:
        #            size: [[13, 12px], [15, 18px]]
        #            interactive: true
        #            sprite: global.townspot_sprite
            water-line-labels:
                filter:
                    all:
                        - $geometry: line
                        - kind: [river,canal,stream,dam,ditch,drain]
                        - $zoom: { min: 14 }
                draw:
                    text-blend-order:
                        text_source: global.ux_language_text_source
                        font:
                            fill: global.text_fill_water
                            family: global.text_font_family
                            style: italic
                            weight: normal
                            size: 12px
                water-line-labels:
                    draw:
                        text-blend-order:
                            font:
                                size: [[14,10px],[17,14px]]
                not-river-not-stream:
                    filter: { kind: [canal,dam,ditch,drain], $zoom: { max: 16 } }
                    draw:
                        text-blend-order:
                            visible: false
                stream:
                    filter: { kind: [stream], $zoom: { max: 17 } }
                    draw:
                        text-blend-order:
                            visible: false

    boundaries:
        data: { source: mapfit, layer: boundaries }
        # country subdivisions (states, provinces)
        draw:
            lines:
                order: global.feature_order
        country:
            filter:
                any:
                    - kind: country
                    - admin_level: 2
            draw:
                lines:
                    color: global.region_boundary_fill
                    width: [[1, 0.5px], [2, 1.0px], [4, 1px], [9, 2px], [14, 3.5px], [16, 4.5px], [17, 14m]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false
            country-labels:
                filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true } }
                draw:
                    text-blend-order:
                        priority: 2
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_boundary_lines_left_right
                        offset: [0, 5px]
                        text_wrap: 100
                        font:
                            family: global.text_font_family
                            size: [[10, 8px],[12, 10px]]
                            weight: 600
                            fill: global.text_fill
                            transform: uppercase
                            stroke: { color: global.land_fill, width: 3px }
                no-left-right:
                    filter: { "name:left": false, "name:right": false }
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_boundary_lines
                            offset: 0px

        other_country_boundary_disputed_etc:
            filter: { kind: [disputed, indefinite, indeterminate, lease_limit, line_of_control, overlay_limit] }
            draw:
                dashed:
                    order: global.feature_order
                    color: global.region_boundary_fill
                    width: [[1,0.2px],[9,1.5px],[17,10m]]
            disputed:
                filter: { kind: [disputed, line_of_control] }
                draw:
                    dashed:
                        visible: false
                    dashed_big:
                        order: global.feature_order
                        color: global.region_boundary_fill
                        width: [[1,0.5px],[9,2.5px],[17,14m]]
        region:
            filter:
                any:
                    - kind: [region,macroregion]
                    - kind_detail: [3,4]
            draw:
                lines:
                    color: global.region_boundary_fill
                    width: [[0, 0.5px], [2, .5px]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false
            early:
                filter: { not: { min_zoom: [1,2] }, $zoom: { max: 8 } }
                draw:
                    lines:
                        visible: false

            region-labels:
                filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true } }
                draw:
                    text-blend-order:
                        priority: 3
                        visible: global.text_visible_admin
                        text_source: global.ux_language_text_source_boundary_lines_left_right
                        offset: [0, 6px]
                        text_wrap: 100px
                        # offset: 10px
                        # anchor: top
                        font:
                            family: global.text_font_family
                            size: [[10, 8px],[12, 10px]]
                            weight: 600
                            fill: global.text_fill_neighborhoods
                            # stroke: { color: global.text_outline, width: 4 }
                            transform: uppercase
                            stroke: { color: global.land_fill, width: 3px }
                no-left-right:
                    filter: { "name:left": false, "name:right": false }
                    draw:
                        text-blend-order:
                            text_source: global.ux_language_text_source_boundary_lines
                            offset: 0px

    roads:
        data: { source: mapfit, layer: roads }
        draw:
            lines:
                #color: black
                width: 1px
                order: global.feature_order
                # but give them all the same outline
                # outline:
                #     order: 352
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                text_source: global.ux_language_text_source
                font:
                    family: global.text_font_family
                    weight: 400
                    fill: global.text_fill

        arrows:
            # oneway arrows and shields are distinct groups!
            filter: { oneway: yes, shield_text: false, not: { kind: rail }, $zoom: { min: 17 } }
            draw:
                arrows:
                    style: icons
                    flat: true
                    visible: global.icon_visible_landuse_green
                    sprite: arrow
                    color: global.road_directional_arrows_fill # [0.766,0.705,0.706]
                    size: [[17, 7px], [20, 14px]]
                    placement: spaced
                    placement_spacing: [[17, 70px], [20, 175px]]
                    angle: auto

        bridges-tunnels:
            filter:
                all:
                    - any: [is_bridge: true, is_tunnel: true]
                    - any: [is_bridge: true, is_tunnel: true]
                    - not: { kind_detail: [subway, monorail] }
            draw:
                lines:
                    cap: round
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        highway:
            filter: { kind: highway, $zoom: { min: 6 } }
            draw:
                lines:
                    #cap: [[0,butt],[15,round]]
                    #join: round
                    color: [[7,global.highway_fill], [8, global.highway_fill]]
                    width: [[6, 3000m], [10, 200m], [14, 28m], [16, 18m], [18, 12m]]
                    # outline:
                    #     color: global.highway_outline
                    #     width: [[9, 0.5px], [12, 1px], [16, 2px], [17, 2px]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: global.highway_fill
                        width: [[6, 3000m], [10, 200m], [14, 28m], [16, 18m], [18, 12m], [19, 10m]]
                        cap: round
                        # outline:
                        #     color: global.highway_outline
                        #     width: [[13, 0px], [14, 1px], [18, 1.5px]]
                early_link:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: 352
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: global.highway_fill
            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        color: global.highway_fill
            highway_bridge:
                filter: {is_bridge: true}
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
            labels-highway-default:
                        filter:
                            $zoom: { min: 12 }
                        draw:
                            text:
                                priority: 50
                                text_source: global.ux_language_text_source_road_ref_and_name_short
                                visible: global.text_visible_highway
                                buffer: 0px
                                text_wrap: false
                                max_lines: 2
                                font:
                                    fill: global.text_highway_fill
                                    weight: 400
                                    stroke: { color: global.text_highway_outline, width: 2 }
                                    size: [[13,10px],[14,11px],[18,13px]]

        major_road:
            filter: { kind: major_road }
            # default style
            draw:
                lines:
                    cap: round
                    join: round
                    color: global.road_fill
                    width: [[6, 3000m], [10, 200m], [14, 28m], [16, 18m], [18, 12m]]
                    # outline:
                    #    width: [[14, 0px], [15, 0.5px], [17, 0.75px], [18, 1.5px], [19, 2px]]
                    #    color: global.road_outline
            primary:
                filter: { kind_detail: [trunk_primary, primary, trunk] }
                draw:
                    lines:
                        color: global.road_fill
                        width: [[8, 0.6px], [9, 0.75px], [10, 1.5px], [13, 2.5px], [14, 4.5px], [15, 5.5px], [16, 7.0px], [19, 7m]]
                        # outline:
                        #    width: [[8, 0px], [9, 0.5px], [10, 1px], [12, 1.25px], [14, 1.5px], [16, 2.5px], [18, 4.5px]]

                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: global.road_fill
                            width: [[8, 1.0px], [9, 1.5px], [10, 2.0px], [14, 3.5px], [15, 4.5px], [16, 6.0px], [17, 12m]]

                    national-routes:
                        filter: { network: ["US:US", "US:I"] }
                        draw:
                            lines:
                                cap: round
                                color: global.highway_fill
                                width: [[8, 2.0px], [10, 2.5px], [14, 3.5px], [15, 4.5px], [16, 6.0px], [17, 12m]]
                                miter_limit: 0
                                join: bevel
                    tunnel:
                        filter: {is_tunnel: true, $zoom: {min: 13} }
                        draw:
                            lines:
                                color: global.tunnel_fill
                    labels-primary-default:
                        filter:
                            $zoom: { min: 13 }
                        draw:
                            text:
                                priority: 57
                                text_source: global.ux_language_text_source_road_ref_and_name_short
                                visible: true
                                buffer: 0px
                                text_wrap: false
                                max_lines: 2
                                font:
                                    fill: global.text_fill
                                    weight: 400
                                    stroke: { color: global.text_outline, width: 3 }
                                    size: [[13,10px],[14,11px],[18,13px]]

            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: global.road_fill
                        width: [[10, 1px], [14, 3px], [16, 4.5px], [18, 10m]]
            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        color: global.tunnel_fill

            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        color: global.road_fill
                        width: [[11, 1.0px], [12, 1.0px], [13, 2.0px], [14, 3.5px], [15, 4.5px], [16, 8m], [19, 10m]]
                        outline:
                            width: [[11, 0px], [12, .75px], [13, 1.0px], [14, 1.75px], [15, 2.0px], [16, 3.0px], [18, 4.0px]]
                routes:
                    filter: { ref: true, $zoom: { min: 12} }
                    draw:
                        lines:
                            color: global.road_fill
                    tunnel:
                        filter: {is_tunnel: true, $zoom: {min: 13} }
                        draw:
                            lines:
                                color: global.tunnel_fill

                in_park:
                    filter: { landuse_kind: [park,nature_reserve,conservation,golf_course,garden,zoo] }
                    draw:
                        lines:
                            #width: [[11, 0.0px], [12, .5px], [14, 1.5px], [16, 2.0px], [19, 7m]]
                            color: global.road_fill
                labels-secondary-default:
                        filter:
                            $zoom: { min: 13 }
                        draw:
                            text:
                                priority: 57
                                text_source: global.ux_language_text_source_road_ref_and_name_short
                                visible: true
                                buffer: 0px
                                text_wrap: false
                                max_lines: 2
                                font:
                                    fill: global.text_fill
                                    weight: 400
                                    stroke: { color: global.text_outline, width: 3 }
                                    size: [[13,10px],[14,11px],[18,13px]]

            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: global.road_fill
                        width: [[11, 0.5px], [12, .75px], [14, 2.5px], [15, 4.0px], [16, 6.5px], [17, 7.5px], [19, 14m]]

                routes:
                    filter: { ref: true, $zoom: { min: 12} }
                    draw:
                        lines:
                            color: global.road_fill

                    tunnel:
                        filter: {is_tunnel: true, $zoom: {min: 13} }
                        draw:
                            lines:
                                color: global.tunnel_fill
                link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            color: global.road_fill
                            width: [[11, 0.0px], [12, .5px], [14, 1.5px], [16, 2.0px], [19, 7m]]
                in_park:
                    filter: { landuse_kind: [park,nature_reserve,conservation,golf_course,garden,zoo] }
                    draw:
                        lines:
                            #width: [[11, 0.0px], [12, .5px], [14, 1.5px], [16, 2.0px], [19, 7m]]
                            color: global.road_fill
                labels-tertiary-default:
                    filter:
                        $zoom: { min: 15 }
                    draw:
                        text:
                            priority: 57
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            visible: true
                            buffer: 0px
                            text_wrap: false
                            max_lines: 2
                            font:
                                fill: global.text_fill
                                weight: 400
                                stroke: { color: global.text_outline, width: 3 }
                                size: [[15,11px],[18,13px]]

        minor_road:
            filter: { kind: minor_road, not: { kind_detail: [service] }, $zoom: { min: 13 } }
            draw:
                lines:
                    color: global.road_fill
                    width: [[13, 1.0px], [14, 1.2px], [15, 2.5px], [16, 8m]]
                    # outline:
                    #    width: [[14, 0px], [15, 0.5px], [17, 0.75px], [18, 1.5px], [19, 2px]]
                    #    color: global.road_outline

            # Is this junk code?
            round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: round
                        join: round

            in_park:
                filter: { landuse_kind: [park,protected_area,nature_reserve,conservation,golf_course,garden,wood,farmland,farm,zoo] }
                draw:
                    lines:
                        #width: [[11, 0.5px], [12, 1.0px], [13, 1.2px], [14, 1.75px], [15, 2.5px], [16, 8m]]
                        color: global.road_fill
            tunnel:
                filter: {is_tunnel: true, $zoom: {min: 13} }
                draw:
                    lines:
                        cap: butt
                        color: global.tunnel_fill
            minor_road_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
            labels-minor-road-default:
                        filter:
                            $zoom: { min: 15 }
                        draw:
                            text:
                                priority: 57
                                text_source: global.ux_language_text_source_road_ref_and_name_short
                                visible: true
                                buffer: 0px
                                text_wrap: false
                                max_lines: 2
                                font:
                                    fill: global.text_fill
                                    weight: 400
                                    stroke: { color: global.text_outline, width: 3}
                                    size: [[15,8px],[16,9px],[17,12px],[18,14px],[19,14px]]

        service_road:
            filter: { kind: minor_road, kind_detail: service }
            draw:
                lines:
                    cap: round
                    join: round
                    color: global.road_fill
                    width: [[13,0.5px],[15, 3px], [16, 3px], [18, 5m], [19, 4.5m]]
            in_park:
                filter: { landuse_kind: [park,forest,nature_reserve,conservation,golf_course,garden,zoo] }
                draw:
                    lines:
                        color: global.road_fill
                        # outline:
                        #     color: global.roads_in_park_fill
                        #     width: [[13, 0px], [14, 0.5px], [17, 3m], [18, 4.0px]]
            labels-service_road:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 60
                        visible: global.text_visible_service_road
                        text_source: global.ux_language_text_source
                        font:
                            fill: global.text_fill
                            size: 12px
                            #stroke: { color: global.text_outline, width: 4 }

        shields:
            filter:
                $zoom: { min: 7 }
                any:
                    - shield_text: true    # some roads don't have shield text, deal with that later
                    - all:
                        - shield_text: false    # some roads don't have shield text, deal with that later
                        - ref: true
                        - kind_detail: [motorway, trunk, primary, secondary, tertiary]
            # default
            draw:
                icons:
                    # you need to match any custom shield to the vector tile `network` values
                    sprite: |
                        function() {
                            if( feature.shield_text ) {
                                return ('generic_shield-' + feature.shield_text.length + 'char');
                            } else {
                                return ('generic_shield-' + feature.ref.length + 'char');
                            }
                        }
                    sprite_default: generic_shield-5char
                    priority: 58
                    # Size is specified below, and limited to 5 char in another filter
                    repeat_group: shields
                    # repeat_distance: [[8,90px],[10,40px],[13,30px]]
                    placement: midpoint
                    placement_min_length_ratio:
                        - [8, 0.1]
                        - [9, 0.25]
                        - [10, 0.25]
                        - [11, 0.15]
                        - [12, 1]
                        - [13, 1.50]
                        - [14, 2.0]
                    cull_from_tile: true
                    visible: false
                    text:
                        offset: [0px, -0.5px]
                        # repeat_distance: 200px
                        anchor: center
                        text_source: |
                            function() {
                                if( feature.shield_text ) {
                                    return feature.shield_text;
                                } else {
                                    return feature.ref;
                                }
                            }
                        font:
                            family: global.text_font_family
                            fill: global.text_signs_fill
                            size: [[7,7px],[12,8px],[16,11px]]

            default_priority_highway:
                filter:
                    all:
                        - kind_detail: motorway
                        - $zoom: { min: 13 }
                draw:
                    icons:
                        priority: 47
                        #color: yellow
                        visible: global.sdk_road_shields

            default_priority_trunk:
                filter:
                    all:
                        - kind_detail: [trunk]
                        - $zoom: { min: 13 }
                draw:
                    icons:
                        priority: 48
                        #color: red
                        visible: global.sdk_road_shields
            default_priority_primary:
                filter:
                    all:
                        - kind_detail: [primary]
                        - $zoom: { min: 13}
                draw:
                    icons:
                        priority: 49
                        #color: aqua
                        visible: global.sdk_road_shields
            default_priority_trunk_secondary:
                filter:
                    all:
                        - kind_detail: [secondary]
                        - $zoom: { min: 13 }
                draw:
                    icons:
                        priority: 53
                        #color: blue
                        visible: global.sdk_road_shields
            default_priority_trunk_tertiary:
                filter:
                    all:
                        - kind_detail: tertiary
                        - $zoom: { min: 13 }
                draw:
                    icons:
                        priority: 55
                        #color: green
                        visible: global.sdk_road_shields

            width_1char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 1)
                        } else {
                            return (feature.ref.length === 1)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[14px,14px]],[13,[16px,16px]],[16,[18px,18px]]]
            width_2char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 2)
                        } else {
                            return (feature.ref.length === 2)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[18px,14px]],[13,[20px,15px]],[16,[24px,18px]]]
            width_3char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 3)
                        } else {
                            return (feature.ref.length === 3)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[25px,14px]],[13,[27px,15px]],[16,[33px,18px]]]
            width_4char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 4)
                        } else {
                            return (feature.ref.length === 4)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[29px,14px]],[13,[31px,15px]],[16,[38px,18px]]]
                # London sucks
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        icons:
                            visible: false
            width_5char:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length === 5)
                        } else {
                            return (feature.ref.length === 5)
                        }
                    }
                draw:
                    icons:
                        size: [[6,[34px,14px]],[13,[37px,15px]],[16,[45px,18px]]]
                # London sucks
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        icons:
                            visible: false
            # this is kinda a hack
            width_longggggg:
                filter: |
                    function() {
                        if( feature.shield_text ) {
                            return (feature.shield_text.length > 5)
                        } else {
                            return (feature.ref.length > 5)
                        }
                    }
                draw:
                    icons:
                        visible: false
            #
            # Now for the good stuff
            #
            legit-shields:
                filter: { shield_text: true }
                # draw:
                #     icons:
                #         color: pink

                # US Interstate roads
                US-I:
                    filter:
                        network: 'US:I'
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: function() { return (feature.network + '-' + feature.shield_text.length + 'char'); }
                            priority: 46
                            visible: global.sdk_road_shields
                            text:
                                offset: [0px, 0.5px]
                                font:
                                    fill: white # [0.308,0.308,0.308]
                                    size: [[7,8px],[13,9px],[15,11px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[15px,18px]],[13,[17px,20px]],[15,[22px,25px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[18px,18px]],[13,[20px,20px]],[15,[25px,25px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[23px,18px]],[13,[26px,20px]],[15,[33px,25px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,18px]],[13,[27px,20px]],[15,[35px,25px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[26px,18px]],[13,[30px,20px]],[15,[38px,25px]]]
                # US Federal Routes
                US-US:
                    filter:
                        network: ['US:US','US:US:Business', 'US:US:Truck', 'US:US:Alternate']
                        $zoom: { min: 7 }
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: |
                                function() { return ('US:US-' + feature.shield_text.length + 'char'); }
                            priority: 47
                            cull_from_tile: true
                            visible: global.sdk_road_shields
                            text:
                                offset: [0px, -0.7px]
                                font:
                                    fill: white #  [0.380,0.318,0.312]
                                    size: [[7,8px],[13,9px],[15,11px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[15px,17px]],[13,[17px,19px]],[15,[22px,24px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[18px,17px]],[13,[20px,19px]],[15,[26px,24px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[34px,25px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,17px]],[13,[29px,19px]],[15,[39px,25px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[27px,17px]],[13,[30px,19px]],[15,[41px,25px]]]
                US-CA:
                    # Match California state highways: `US:CA`
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:CA$/.test(feature.network)
                        }
                    draw:
                        icons:
                            sprite: function() { return (feature.network + '-' + feature.shield_text.length + 'char'); }
                            #priority: 48
                            text:
                                offset: [0px, 1px]
                                font:
                                    fill: white #  [0.308,0.308,0.308]
                                    size: [[7,7px],[13,9px],[15,10px]]
                    motorway:
                        filter: { kind_detail: [motorway], $zoom: [7,8] }
                        draw:
                            icons:
                                visible: global.sdk_road_shields
                    trunk:
                        filter: { kind_detail: [trunk], $zoom: [8,9] }
                        draw:
                            icons:
                                visible: global.sdk_road_shields
                    primary:
                        filter: { kind_detail: primary, $zoom: [10,11] }
                        draw:
                            icons:
                                visible: global.sdk_road_shields
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[14px,16px]],[13,[15px,18px]],[15,[18px,21px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[18px,18px]],[13,[20px,20px]],[15,[23px,23px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[21px,18px]],[13,[24px,20px]],[15,[28px,23px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[24px,18px]],[13,[26px,20px]],[15,[31px,23px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[25px,18px]],[13,[27px,20px]],[15,[32px,23px]]]
                US-NY:
                    # Match New York state highways: `US:NY`
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:NY$/.test(feature.network)
                                /* (/^US:NY$/.test(feature.network) || /^NY:US$/.test(feature.network)) */
                        }
                    draw:
                        icons:
                            sprite: |
                                function() { return ( 'US:NY-' + feature.shield_text.length + 'char'); }
                            text:
                                # offset: [0px, 1px]
                                font:
                                    fill: white # [0.308,0.308,0.308]
                                    size: [[7,7px],[13,9px],[15,10px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[13px,17px]],[13,[15px,19px]],[15,[18px,22px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[17px,17px]],[13,[19px,19px]],[15,[22px,22px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[20px,17px]],[13,[22px,19px]],[15,[27px,22px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[21px,17px]],[13,[24px,19px]],[15,[29px,22px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[30px,22px]]]
                US-PA:
                    # Match Pennsylvania state highways
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^US:PA$/.test(feature.network)
                        }
                    draw:
                        icons:
                            sprite: |
                                function() { return ( 'US:PA-' + feature.shield_text.length + 'char'); }
                            text:
                                offset: [0px, 1px]
                                font:
                                    fill: white #[0.308,0.308,0.308]
                                    size: [[7,7px],[13,9px],[15,10px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[13px,17px]],[13,[15px,19px]],[15,[18px,22px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[17px,17px]],[13,[19px,19px]],[15,[22px,22px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[21px,17px]],[13,[24px,19px]],[15,[28px,22px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[22px,17px]],[13,[25px,19px]],[15,[30x,22px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[24px,17px]],[13,[27px,19px]],[15,[32px,22px]]]

                # USA County Routes
                US-counties:
                    filter: |
                        function() {
                            return feature.shield_text &&
                                /^\w+:\w+:(!Alternate).+$/.test(feature.network) &&
                                $zoom > 10
                        }
                    draw:
                        icons:
                            # you need to match any custom shield to the vector tile `network` values
                            sprite: function() { return ('county_shield_' + feature.shield_text.length + 'char'); }
                            #color: pink
                            #priority: 19
                            visible: global.sdk_road_shields
                            text:
                                font:
                                    fill: white # [0.508,0.508,0.508]
                                    #size: [[11,7px],[15,10px]]
                    width_1char:
                        filter: function() { return (feature.shield_text.length === 1) }
                        draw:
                            icons:
                                size: [[6,[14px,14px]],[13,[16px,16px]],[15,[18px,18px]]]
                    width_2char:
                        filter: function() { return (feature.shield_text.length === 2) }
                        draw:
                            icons:
                                size: [[6,[16px,14px]],[13,[18px,15px]],[15,[22px,18px]]]
                    width_3char:
                        filter: function() { return (feature.shield_text.length === 3) }
                        draw:
                            icons:
                                size: [[6,[20px,14px]],[13,[21px,15px]],[15,[26px,18px]]]
                    width_4char:
                        filter: function() { return (feature.shield_text.length === 4) }
                        draw:
                            icons:
                                size: [[6,[25px,14px]],[13,[28px,15px]],[15,[34px,18px]]]
                    width_5char:
                        filter: function() { return (feature.shield_text.length === 5) }
                        draw:
                            icons:
                                size: [[6,[30px,14px]],[13,[33px,15px]],[15,[40px,18px]]]

        path:
            filter:
                all:
                    - kind: path
                not:
                    - kind_detail: [steps, track]
                    - kind_detail: [pier]
            draw:
                lines:
                    color: global.pedestrian_path_fill
                    width: [[14, 1.0], [15, 3m], [17, 2m]]
                    cap: round
                    join: round
                    order: 351
            pedestrian:
                filter: { kind_detail: pedestrian }
                draw:
                    lines:
                        order: 99
                        color: global.pedestrian_path_fill
                        width: [[14, 1.0], [15, 3m], [17, 2m]]
                        # cap: butt
                        # join: round
            bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        width: [[15, 3.5], [17, 3m]]
                        cap: round
            in_park:
                # should `forest` and `wood` be included?
                filter: { landuse_kind: [park,nature_reserve,conservation,golf_course,garden,grass,cemetery] }
                draw:
                    lines:
                        width: [[14, 1.0], [15, 3m], [17, 2m]]
                        cap: round
                        join: round
                        color: global.pedestrian_paths_in_park_fill
                        # outline:
                        #     color: global.roads_in_park_fill
                        #     width: [[14, 0.1px], [15, 0.5px], [18, 2px]]
                # golf_course:
                #     filter: { landuse_kind: golf_course }
                #     draw:
                #         lines:
                #             outline:
                #                 color: global.roads_in_park_fill
                # nature_reserve:
                #     filter: { landuse_kind: nature_reserve }
                #     draw:
                #         lines:
                #             outline:
                #                 color: global.roads_in_park_fill
                # conservation:
                #     filter: { landuse_kind: conservation }
                #     draw:
                #         lines:
                #             outline:
                #                 color: global.roads_in_park_fill
            # in_cemetery_garden:
            #     filter: { landuse_kind: [cemetery,garden] }
            #     draw:
            #         lines:
            #             outline:
            #                 color: global.green2_r
            #                 width: [[15, 0px], [16, 0.5px], [18, 3px]]
            in_zoo:
                filter: { landuse_kind: zoo }
                draw:
                    lines:
                            color: global.pedestrian_paths_in_park_fill
            in_university:
                filter: { landuse_kind: [university,college] }
                draw:
                    lines:
                        cap: round
                        join: round
                        color: global.pedestrian_paths_in_universities_fill
                        # outline:
                        #     color: global.road_fill
                        #     width: [[14, 0px], [16, 0.5px], [18, 2px]]
            # in_hospital:
            #     filter: { landuse_kind: hospital }
            #     draw:
            #         lines:
            #             color: [[14, global.road_fill],[16, global.road_fill]]
            #             outline:
            #                 color: global.road_fill
            #                 width: [[14, 0px], [16, 0.5px], [18, 2px]]
           # labels-path:
           #     filter: { $zoom: { min: 17 } }
           #     draw:
           #         text-blend-order:
           #             priority: 61
           #             visible: global.text_visible_path
           #             text_source: global.ux_language_text_source
           #             font:
           #                 fill: global.text_fill
           #                 size: 12px
           #                 stroke: { color: global.text_outline, width: 4 }
        track:
            filter: { kind: path, kind_detail: track }
            draw:
                lines:
                    color: [[13, global.road_fill], [15, global.road_fill]]
                    width: [[13, 0.5px], [14, 1.0px], [15, 1.0px], [16, 6m]]
                    #color: [[13, global.road_fill],[16, global.road_fill]]
                    #width: [[13, 1.0], [15, 1.5], [17, 3m]]
                    cap: round
                    join: round
            bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        width: [[15, 3.5], [17, 3m]]
                        cap: round
            in_park:
                filter: { landuse_kind: [park,national_park,nature_reserve,conservation,golf_course,garden] }
                draw:
                    lines:
                        color: global.pedestrian_paths_in_park_fill
                        width: [[14, 1.0], [15, 3m], [17, 2m]]
        steps:
            filter:
                all:
                    - kind: path
                    - kind_detail: steps
                any:
                    - { $zoom: { min: 15 } }
            draw:
                dashed_steps:
                    order: global.feature_order
                    #cap: round
                    #join: round
                    visible: global.show_staircases
                    color: global.pedestrian_steps_fill
                    dash_background_color: global.pedestrian_steps_fill
                    width: [[14, 1.0], [15, 3m], [17, 3m]]
                    # outline:
                    #     color: global.pedestrian_path_fill
                    #     width: [[14,1.0px],[15,1.5px],[18,2m]]
            in_park:
                filter: { landuse_kind: [park,nature_reserve,conservation,golf_course,garden] }
                draw:
                    dashed_steps:
                        color: global.roads_in_park_fill
                        dash_background_color: global.roads_in_park_fill
            in_university:
                filter: { landuse_kind: university }
                draw:
                    dashed_steps:
                        color: global.roads_in_university_fill
                        dash_background_color: global.roads_in_university_fill
            in_hospital:
                filter: { landuse_kind: hospital }
                draw:
                    dashed_steps:
                        color: global.roads_in_hospital_fill
                        dash_background_color: global.roads_in_hospital_fill
            labels-steps:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 62
                        visible: global.text_visible_steps
                        text_source: global.ux_language_text_source
                        font:
                            fill: global.text_fill
                            size: 12px
                            stroke: { color: global.text_outline, width: 4 }
        winter_sport_pistes:
            filter: { kind: piste }
            draw:
                lines:
                    order: 388   # We override the server value here because this is also a special Ski Map
                    cap: round
                    join: round
                    color: '#909090'
                    width: [[13,0px],[14,0.5px],[15, 1px], [16, 2px], [18, 3m]]
                text-blend-order:
                    priority: 18
                    visible: global.text_visible_piste
                    font:
                        fill: global.text_fill
                        size: 12px
                        stroke: { color: global.winter_sports_area_fill, width: 4 }
            early:
                filter: { $zoom: { max: 15 } }
                draw:
                    text-blend-order:
                        visible: false
            early-z15:
                filter: { $zoom: [15] }
                draw:
                    text-blend-order:
                        font:
                            fill: global.text_fill
                            size: 11px
            easy:
                filter: { piste_difficulty: easy }
                draw:
                    lines:
                        color: global.piste_easy
            intermediate:
                filter: { piste_difficulty: intermediate }
                draw:
                    lines:
                        color: global.piste_intermediate
            advanced:
                filter: { piste_difficulty: advanced }
                draw:
                    lines:
                        color: global.piste_advanced
                    text-blend-order:
                        text_source: global.ux_language_text_source_piste_advanced
            expert:
                filter: { piste_difficulty: expert }
                draw:
                    lines:
                        color: global.piste_expert
                    text-blend-order:
                        text_source: global.ux_language_text_source_piste_expert
        pier:
            filter: { kind: path, kind_detail: pier }
            draw:
                lines:
                    color: [[13, global.pedestrian_path_fill],[16, global.pedestrian_path_fill]]
                    width: [[13, 1.5], [15, 2.0], [17, 3m]]
        racetrack:
            filter: { kind: racetrack }
            draw:
                lines:
                    #order: 5
                    cap: round
                    join: round
                    color: global.playground_fill
                    width: [[13,1.5px],[14,2px],[15, 3px], [16, 5px], [18, 10m], [19, 15m]]

        airport-lines:
            filter: { kind: aeroway, kind_detail: [runway,taxiway] }
            draw:
                lines:
                    color:  [[10,[0.4,0.4,0.4]],[11,[0.50,0.50,0.50]],[12,[0.7,0.7,0.7]],[13,[0.75,0.75,0.75]],[14,[0.95,0.95,0.95]]]
                    cap: butt
                    width: [[10,0.75px],[11,1.25px],[12,2px],[13,4px],[14,8px],[15,16px],[16,32px],[17,60m]]

                    #color: global.grey2
                    #cap: butt
                    #width: [[10, 1px], [11, 1.5px], [12, 2px], [13, 4px], [14, 8px], [15, 16px], [16, 32px], [17, 60m]]
            # Features come in at zoom 9, but include mostly minor airports without POIs until z13
            early:
                filter: { $zoom: { max: 12 }, not: { landuse_kind: [aerodrome, runway, taxiway] } }
                draw:
                    lines:
                        visible: false
            not-round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: butt
            taxiway:
                filter: { kind_detail: [taxiway] }
                draw:
                    lines:
                        color: global.airport_road_fill
                        width: [[13,1px],[14,2px],[15,3px],[16,7px],[17,20m]]
                early:
                    filter: { $zoom: { max: 14 } }
                    draw:
                        lines:
                            visible: false
            runway:
                filter: { kind_detail: runway }
                draw:
                    lines:
                        color: global.airport_road_fill
       # ferry:
           # filter: { kind: ferry }
           # draw:
              #  lines:
                   # color: global.ferry_fill
                  #  width: [[12, 0.5px], [14, 1px], [17, 3m]]


        aerialway:
            filter: { kind: aerialway }
            draw:
                lines:
                    color:  '#444'
                    width: [[14, 0.5px], [15, 1.0px], [16, 2m]]
            gondola_cable_car:
                filter: { kind_detail: [gondola, cable_car] }
                draw:
                    lines:
                        color: global.railways_fill
                        width: [[12, 2.0px], [13, 2px], [14, 3.5px], [15, 4.5px], [16, 9m]]
            chair_lift:
                filter: { kind_detail: chair_lift }
                draw:
                    lines:
                        color: '#333'
                        width: [[13, 1px], [14, 1.5px], [15, 3px], [16, 7m]]
            aerialway-labels:
                filter: { $zoom: { min: 14 } }
                draw:
                    text-blend-order:
                        priority: 63
                        visible: global.text_visible_aerialway
                        text_source: global.ux_language_text_source
                        font:
                            fill: global.text_fill
                            size: 12px
                            stroke: { color: global.winter_sports_area_fill, width: 4 }
                minor:
                    filter: { not: { kind_detail: [gondola,cable_car,chair_lift] }, $zoom: { max: 17 } }
                    draw:
                        text-blend-order:
                            visible: false
                early_gondola:
                    filter: { $zoom: [14], kind_detail: [gondola,cable_car] }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600
                later:
                    filter: { $zoom: { min: 15 } }
                    draw:
                        text-blend-order:
                            font:
                                weight: 600
        railway-late:
            #filter: { kind: rail, not: { railway: [subway,light_rail,tram] } }
            #filter: { kind: rail, not: { railway: [subway,light_rail,tram] },  not: { kind_detail: [rail, subway,light_rail,tram], not: { kind: [subway,monorail,light_rail,tram] } } }
            filter:
                all:
                    - kind: [light_rail,tram]
                    #- kind: not: {railway: [subway,light_rail,tram]}
                    #- not: [railway:]
            draw:
                lines:
                    color: [[14, global.railways_fill],[16, global.railways_fill]]
                    width: [[12,0px],[13,0.25px],[14,0.4px],[15,0.75px],[16,0.75px],[18,1m]]
                    # let roads sort themselves past zoom 14
                    order: global.feature_order
                    # but give them all the same outline
                    outline:
                        order: 354
            bridges-tunnels:
                filter:
                    all:
                        -  any: [is_bridge: true, is_tunnel: true]
                        -  not: { kind_detail: [subway, monorail] }
                draw:
                    lines:
                        color: white
                        outline:
                            # except bridges and tunnels, their outlines should also self-sort
                            order: function() { return feature.sort_rank || 305; }
            service:
                filter: { service: true }
                draw:
                    lines:
                        color: global.railways_fill
                        width: [[14,0px],[15,0.4px],[16,0.6px],[18,0.7m]]
            # z-order:
            #     #filter: { $zoom: {min: 12} }
            #     draw:
            #         lines:
            #             # let roads sort themselves past zoom 14
            #             order: global.feature_order
            #             #color: white
            #             #width: [[13,1px],[14,2px],[15,3px],[16,7px],[17,20m]]
            #             # but give them all the same outline
            #             outline:
            #                 order: 354
            #
            #     bridges-tunnels:
            #         filter: { any: [is_bridge: true, is_tunnel: true] }
            #         draw:
            #             lines:
            #                 outline:
            #                     # except bridges and tunnels, their outlines should also self-sort
            #                     order: function() { return feature.sort_rank || 305; }

    transit-basemap:
        data: { source: mapfit, layer: transit }
        subway-light-rail:
            filter: { not: { kind: [platform, monorail] },$zoom: { min: 14 } }
            draw:
                lines:
                    order: function() { return feature.sort_rank || 275; }
            # railway:
            #     filter: { kind: [railway,train] }
            #     draw:
            #         lines:
            #             color: grey
            #             width: [[14,1px],[16,2px],[18,3m]]
            light_rail:
                filter: { kind: [light_rail,tram], $zoom: { min: 16 } }
                draw:
                    lines:
                        order: 415    # We want this to be above roads, below gondolas
                        color: grey
                        width: [[14,0.5px],[16,1px],[17,1.5px],[19,1m]]

        transit-overlay-rail-lines:
            filter:
                all:
                    - $zoom: { min: 12, max: 19 }
                    - not: { kind: [train, platform, railway, monorail, light_rail] }
                    - not: { network: [PATH, Staten Island Railway]}
                    - function() { return global.sdk_transit_overlay; }
            draw:
                lines:
                    order: 499
                    color: purple
                    width: [[5,1.5px],[6,2px],[11,3px],[18,4px]]
                    # outline:
                    #     color: [1.,1.,1.,.8]
                    #     width: [[7,0px],[8,0.25px],[9,0.5px],[12,1.0px],[13,1.75px],[14,2px]]
                        #width: [[12,1.0px],[13,1.75px],[14,2px]]
            train-sizing-color:
                filter: { kind: train }
                draw:
                    lines:
                        color: purple
                        width: [[5,1.0px],[6,1.0px],[7,1.25px],[11,2.0px],[13,2.5px],[18,3.5px]]
                        # outline:
                        #     width: [[12,1.0px],[13,1.75px],[14,2px]]
                stack-below-other-transit-later-zooms:
                    filter: { $zoom: { min: 9 } }
                    draw:
                        lines:
                            order: 511
            subway-sizing:
                filter: { kind: [subway]}

                draw:
                    lines:
                        cap: round
                        join: round
                        width: [[12, 2.5px],[13, 2.5px], [14, 4.5px], [15, 5.5px], [16, 7.0px], [19, 7m]]
                        #width: [[9,1px],[11,2px],[12,3px],[13,4px],[15,5px],[16,7px],[17,9px]]
                        outline:
                            #color: [[10,white],[11,black]]

                            width: [[12, 2.5px],[13,1.5px],[15,2px]]
                            #width: [[12,1.5px],[13,2.0px],[14,2.5px]]
            # light-rail-and-tram-sizing:
            #     filter: { kind: [light_rail, tram] }
            #     draw:
            #         lines:
            #             width: [[10,1px],[12,1.5px],[15,2px],[18,3.5px]]
            #             outline:
            #                 #color: [[11,white],[12,black]]
            #                 width: [[12,0.25px],[13,0.5px],[14,1px],[16,2px]]
            has-data-color:
                filter: { colour: true }
                draw:
                    lines:
                        order: 510
                        width: [[9,2px],[11,3px],[12,4px]]
                        color: function() { return feature.colour || 'purple'; }
                        #outline:
                            #color: function() { if(feature.colour == 'silver') { return 'black'; } else { return [0.,0.,0.,.1]; } }
                            #width: [[12,1.0px],[13,1.75px],[14,2px]]
                # train-with-color:
                #     filter: { kind: train }
                #     draw:
                #         lines:
                #             order: 514
                subway-with-color:
                    filter: { kind: subway }
                    draw:
                        lines:
                            order: 513
                light-rail-and-tram-with-color:
                    filter: { kind: [light_rail, tram] }
                    draw:
                        lines:
                            order: 512
            missing-colour:
                filter: { colour: false }
                train-missing-color:
                    filter: { kind: train, colour: false }
                    draw:
                        lines:
                            #width: [[5,1.25px],[6,1.75px],[11,2.0px],[13,2.5px],[18,2.5m]]
                            order: 506
                subway-missing-color:
                    filter: { kind: subway, colour: false }
                    draw:
                        lines:
                            order: 505
                light-rail-and-tram-missing-color:
                    filter: { kind: [light_rail, tram], colour: false }
                    draw:
                        lines:
                            order: 504
            labels-transit-lines:
                filter:
                    all:
                        - function() { return global.sdk_transit_overlay; }
                        - all:
                            - $zoom: { min: 13 }
                            - ref: true
                draw:
                    icons:
                        priority: 20
                        # you need to match any custom shield to the vector tile `network` values
                        sprite: function() { return ('sdk_shield-' + feature.ref.length + 'char'); }
                        sprite_default: sdk_shield_5char
                        color: function() { if ( feature.kind === 'train') { return 'purple' } else { return feature.colour || 'purple'; } }
                        # Size is specified below, and limited to 5 char in another filter
                        repeat_group: shields
                        repeat_distance: [[8,90px],[10,40px],[13,30px]]
                        placement: midpoint
                        placement_min_length_ratio:
                            - [8, 0.1]
                            - [9, 0.25]
                            - [10, 0.25]
                            - [11, 0.15]
                            - [12, 1]
                            - [13, 1.50]
                            - [14, 2.0]
                        cull_from_tile: true
                       # visible: false
                        text:
                            offset: [0px, -0.5px]
                            repeat_distance: 200px
                            anchor: center
                            text_source: function() { if( feature.ref.length < 6 ) { return feature.ref; } else { return ''; } }
                            font:
                                family: Montserrat
                                fill: function() { if(feature.colour == 'yellow') { return '#555'; } else { return 'white'; } }
                                style: bold
                                size: [[7,7px],[12,8px],[16,11px]]

                width_1char:
                    filter: function() { return (feature.ref.length === 1); }
                    draw:
                        icons:
                            size: [[6,[16px,16px]],[13,[18px,18px]],[16,[21px,21px]]]
                width_2char:
                    filter: function() { return (feature.ref.length === 2); }
                    draw:
                        icons:
                            size: [[6,[21px,16px]],[13,[24px,18px]],[16,[28px,21px]]]
                width_3char:
                    filter: function() { return (feature.ref.length === 3); }
                    draw:
                        icons:
                            size: [[6,[27px,16px]],[13,[31px,18px]],[16,[36px,21px]]]
                width_4char:
                    filter: function() { return (feature.ref.length === 4); }
                    draw:
                        icons:
                            size: [[6,[32px,16px]],[13,[36px,18px]],[16,[41px,21px]]]
                    # London sucks
                    early:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            icons:
                                visible: false
                width_5char:
                    filter: function() { return (feature.ref.length === 5); }
                    draw:
                        icons:
                            size: [[6,[37px,16px]],[13,[41px,18px]],[16,[48px,21px]]]
                    # London sucks
                    early:
                        filter: { $zoom: { max: 14 } }
                        draw:
                            icons:
                                visible: false
                # this is kinda a hack
                width_longggggg:
                    filter: function() { return (feature.ref.length > 5); }
                    draw:
                        icons:
                            visible: false

            z19-show-long-route-name:
                    filter:
                        all:
                            - function() { return global.sdk_transit_overlay; }
                            - $zoom: { min: 19 }
                    draw:
                        text:
                            font:
                                fill: black
                                style: italic
                                stroke: { color: white, width: 3px }

    # buildings are the only layer that gets lighting
    buildings:
        data: { source: mapfit, layer: buildings }
        filter:
            all:
                # limit show smaller landuse areas to higher zooms
                # - { $zoom: [13], scale_rank: [1,2] }
                # - { $zoom: [14], scale_rank: [1,2,3] }
                # - { $zoom: [15], area: { min: 5000 }, name: true }
                # - { $zoom: [15], area: { min: 5000 }, kind: true }
                # - { $zoom: [15], area: { min: 3000 }, landuse_kind: true }
                # - { $zoom: [15], height: { min: 100 } }
                # - { $zoom: [15], volume: { min: 10000 } }
                #- { $zoom: [16], area: { min: 2000 }, name: true }
               # - { $zoom: [16], area: { min: 2000 }, kind: true }
                #- { landuse_kind: attraction }
                #- { $zoom: [15], area: { min: 70000 } }
                #- { $zoom: [15], volume: { min: 70000 } }
                #- { $zoom: [17], volume: { min: 50 } }
                - { $zoom: { min: 16 } } #16.5 is preferred
                - not: { location: underground }
#                - { $zoom: { max: 18 } }

        draw:
            polygons:
                #order: function() { if( $zoom < 17) { return 5; } else { return 9; } }
                order: 438
                color: global.building_fill
                extrude: global.sdk_building_extrude
            outline:
                style: lines
                order: 439
                color: global.building_outline
                width: [[17,1px],[18,1m],[19,1m]]
                extrude: global.sdk_building_extrude
    buildings_client:
        data: { source: mapfit, layer: buildings }
        filter: function() { return feature.id == "316278155"; }
        interactive: true
        draw:
            sdk-polygon-overlay:
            interactive: true
            order: 600
            color: rgba(100.0, 100.0 , 150.0 , 1)
            extrude: true
            animated: true

        # basement:
        #     filter:
        #         all:
        #             - layer: [-1, -2, -3, -4, -5]
        #     draw:
        #         polygons:
        #             extrude: false
        #             order: 329
        #         outline:
        #             extrude: false
        #             order: 330

        # in_park:
        #     #todo: does forest belong here?
        #     filter: { landuse_kind: [park,forest,nature_reserve,conservation,golf_course,garden] }
        #     draw:
        #         polygons:
        #             color: global.building_fill
        #         outline:
        #             color: global.building_outline
        #     golf_course:
        #         filter: { landuse_kind: golf_course }
        #         draw:
        #             outline:
        #                 color: global.building_outline
        #     nature_reserve:
        #         filter: { landuse_kind: nature_reserve }
        #         draw:
        #             outline:
        #                 color: global.building_outline
        #     conservation:
        #         filter: { landuse_kind: conservation }
        #         draw:
        #             outline:
        #                 color: global.building_outline
#         in_zoo:
#             filter: { landuse_kind: [zoo, animal, enclosure, petting_zoo, aviary] }
#             draw:
#                 polygons:
#                     color: global.building_fill
#                 outline:
#                     color: global.building_outline
#         in_university:
#             filter: { landuse_kind: [university,school] }
#             draw:
#                 polygons:
#                     color: global.building_fill
#                 outline:
#                     color: global.building_outline
#         in_hospital:
#             filter: { landuse_kind: hospital }
#             draw:
#                 polygons:
#                     color: global.building_fill
#                 outline:
#                     color: global.building_outline
#         in_airport:
#             filter: { landuse_kind: [aerodrome, runway, taxiway] }
#             draw:
#                 polygons:
#                     color: global.building_fill
#                 outline:
#                     color: global.building_outline
# #                    width: [[14,0.5px],[15,0.5px],[17,0.5px],[18,0.75px],[19,0.25m]]

        # address-labels:
        #     filter:
        #         all:
        #             - function() { return global.text_visible_address; }
        #             - $zoom: { min: 20 }
        #         any:
        #             - kind: address
        #             - { label_position: true, addr_housenumber: true, name: false }
        #     draw:
        #         text-blend-order:
        #             #interactive: global.sdk_interactive
        #             order: 7
        #             text_source: addr_housenumber
        #             font:
        #                 fill: global.text_address_fill
        #                 family: global.text_font_family
        #                 style: italic
        #                 size: 10px
        #                 stroke: { color: global.building_fill, width: 4 }

    places:
        data: { source: mapfit, layer: places }
        filter:
            name: true
        draw:
            icons:
                text:
                    text_source: global.ux_language_text_source
                    visible: false
                    buffer: 3px
                    font:
                        family: global.text_font_family
                        fill: global.text_fill
            # NOTE: This is a hack for localities because of an icon & text bug, see note below
            text-blend-order:
                text_source: global.ux_language_text_source
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: global.text_fill
            # END NOTE
        country:
            filter:
                kind: country
                $zoom: { min: 3, max: 9 }
            draw:
                text-blend-order:
                    priority: 3
                    visible: global.text_visible_admin
                    font:
                        fill: global.text_fill
                        weight: 600
                        transform: uppercase
            country-z2-3:
                filter:
                    $zoom: [2,3]
                draw:
                    text-blend-order:
                        priority: 10
                        buffer: 10px
                        font:
                            size: [[2,9px],[3,10px]]
                early-ones-z2:
                    filter:
                        $zoom: [2]
                        not: { name: [United States of America,Brasil,中华人民共和国,Россия,Canada,Kalaallit Nunaat,Ísland,Australia,India,日本,Guam,Indonesia,South Africa,مصر,Nigeria,Kenya] }
                    draw:
                        text-blend-order:
                            visible: false
                early-ones-z3:
                    filter:
                        $zoom: [3]
                        name: [Nederland,Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,Crna Gora,Македонија,The Gambia,Burundi,Swaziland,الإمارات العربية المتحدة,العراق,Singapore,El Salvador,Belize,Trinidad and Tobago, Saint Lucia, Montserrat,Anguilla,República Dominicana,Bahamas,British Virgin Islands,Antigua and Barbuda,Grenada,Sint Maarten,Saint Kitts and Nevis,Cayman Islands,België - Belgique - Belgien,Deutschland,España]
                    draw:
                        text-blend-order:
                            visible: false
            country-z4:
                filter:
                    $zoom: [4]
                draw:
                    text-blend-order:
                        buffer: 10px
                        priority: 8
                        font:
                            size: 12px
                early-ones-z4:
                    filter:
                        name: [Nederland,Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,Crna Gora,Македонија,The Gambia,Burundi,Swaziland,الإمارات العربية المتحدة,العراق,Singapore,El Salvador,Belize,Trinidad and Tobago, Saint Lucia, Montserrat,Anguilla,República Dominicana,Bahamas,British Virgin Islands,Antigua and Barbuda,Grenada,Sint Maarten,Saint Kitts and Nevis,Cayman Islands,België - Belgique - Belgien,Deutschland,España,Magyarország,Österreich,Polska,Хуссар Ирыстон,Аҧсны - Абхазия]
                    draw:
                        text-blend-order:
                            visible: false
            country-z5:
                filter:
                    $zoom: [5]
                draw:
                    text-blend-order:
                        priority: 8
                        font:
                            size: 13px
                            stroke: { color: global.text_outline, width: 3 }
                early-ones-z5:
                    filter:
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        - name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,El Salvador,Belize,België - Belgique - Belgien,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            visible: false
            country-z6:
                filter:
                    $zoom: [6]
                draw:
                    text-blend-order:
                        priority: 8
                        font:
                            weight: 600
                            size: 14px
                            stroke: { color: global.text_outline, width: 3 }
                small-ones-z6:
                    filter:
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        - name: [Luxembourg,Liechtenstein,San Marino,Civitatis Vaticanæ,België - Belgique - Belgien,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            visible: false
            country-z7:
                # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                filter: { $zoom: { min: 7, max: 9 } }
                draw:
                    text-blend-order:
                        font:
                            size: 16px
                            weight: bold
                            stroke: { color: global.text_outline, width: 4 }
                small-ones-z7:
                    filter:
                        $zoom: [7]
                        # South Ossetia and Abkhazia aren't countries (they are disputed areas)
                        name: [Liechtenstein,San Marino,Civitatis Vaticanæ,"Хуссар Ирыстон - Южная Осетия","Хуссар Ирыстон","Аҧсны - Абхазия","Լեռնային Ղարաբաղի Հանրապետությու (Nagorno-Karabakh Republic)"]
                    draw:
                        text-blend-order:
                            visible: false
                small-pop:
                    filter:
                        - population: { max: 5000000 }
                    draw:
                        text-blend-order:
                            priority: 30
                            font:
                                size: 12px

#         region:
#             filter:
#                 kind: region
#                 $zoom: { min: 4, max: 9 }
#             draw:
#                 text-blend-order:
#                     priority: 14
#                     visible: false
#                     text_source: global.ux_language_text_source_short
#                     font:
#                         size: 10px
#                         weight: 300
#                         fill: global.text_fill
#                         transform: uppercase
#             region-z4:
#                 filter:
#                     $zoom: [4]
#                     not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen] }
#                 draw:
#                     text-blend-order:
#                         visible: global.text_visible_admin
#             region-z5:
#                 filter:
#                     $zoom: [5]
#                     not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen] }
#                 draw:
#                     text-blend-order:
#                         visible: global.text_visible_admin
#                         font:
#                             size: 13px
#             region-z6:
#                 filter:
#                     $zoom: [6]
#                     not: { name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen] }
#                 draw:
#                     text-blend-order:
#                         visible: global.text_visible_admin
#                         font:
#                             size: 13px
#                             stroke: { color: global.text_outline, width: 4 }
#             region-z7-z8:
#                 filter: { $zoom: [7,8] }
#                 draw:
#                     text-blend-order:
#                         visible: global.text_visible_admin
#                         text_source: global.ux_language_text_source_short_proxy_name
#                         font:
#                             size: 14px
#                             stroke: { color: global.text_outline, width: 4 }
#                 pesky:
#                     filter:
#                         $zoom: [7]
#                         name: [Western Cape,Eastern Cape,Northern Cape,North West,Limpopo,KwaZulu-Natal,Hamburg,Freie und Hansestadt Hamburg,Neuchâtel,Nordrhein-Westfalen,Haute-Normandie,Baden-Württemberg,Bayern,Sachsen-Anhalt,Berlin,Mecklenburg-Vorpommern,Schleswig-Holstein,Brandenburg,Niedersachsen,Saarland,Thüringen,Hessen,Sachsen]
#                     draw:
#                         text-blend-order:
#                             visible: false

#                 abbrev-small-ones-z7:
#                     filter:
#                         $zoom: [7]
#                         name: [Delaware,New Jersey,Connecticut,Rhode Island,Massachusetts,New Hampshire,Vermont]
#                     draw:
#                         text-blend-order:
#                             text_source: global.ux_language_text_source_abbreviation
#                 region-z8:
#                     filter:
#                         $zoom: [8]
#                     draw:
#                         text-blend-order:
#                             text_source: global.ux_language_text_source
#                     no-pop:
#                         filter:
#                             any:
#                                 - population: false
#                                 - population: { max: 1000000 }
#                         draw:
#                             text-blend-order:
#                                 font:
#                                     size: 16px

        populated-places:
            filter:
                kind: locality
            draw:
                icons:
                    visible: global.icon_visible_populated_places
                    size: [[10,4px],[11,0px]]
                    sprite: townspot-xs-rev
                    buffer: 8px
                    priority: 30
                    text:
                        visible: global.text_visible_populated_places
                        buffer: 3px
                        font:
                            size: [[5,9px],[8,10px],[12,11px]]
                text-blend-order:
                    visible: global.text_visible_populated_places
                    buffer: 10px
                    font:
                        size: [[5,9px],[8,10px],[12,11px]]

            #
            # NOTE: you'd think no-townspot would be the way to go, but icons with size 0px seems to have a bug to also hide the text :(
            #
            # no-townspot:
            #     filter: { $zoom: { min: 11 } }
            #     draw:
            #         icons:
            #             size: 0px
            #             text:
            #                 anchor: center
            #
            # NOTE: So instead we play a shell game with symbolizers per zoom
            #
            _icons_later:
                filter: { $zoom: { min: 11 } }
                draw:
                    icons:
                        visible: false
                    text-blend-order:
                        visible: global.text_visible_populated_places

            _text_early:
                filter: { $zoom: { max: 11 } }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            z8-50k-below:
                filter: { $zoom: [8,9], population: { min: 10000, max: 50000 } }
                draw:
                    icons:
                        buffer: 25px
                        #color: red
                        #visible: false
            z9-10k-below:
                filter: { $zoom: [8,9], population: { max: 10000 } }
                draw:
                    icons:
                        buffer: 18px
                        #color: blue
                        #visible: false
            z9-no-population:
                filter: { $zoom: [8,9], population: false }
                draw:
                    icons:
                        buffer: 10px
                        #color: yellow
                        #visible: false

            sorry-denver:
                filter:
                    $zoom: [3]
                    name: [Denver]
                draw:
                    icons:
                        visible: false

            halo-populated-places:
                filter:
                    $zoom: { min: 8 }
                draw:
                    icons:
                        text:
                            font:
                                stroke: { color: global.text_outline, width: 2 }
                    text-blend-order:
                        font:
                            stroke: { color: global.text_outline, width: 2 }

            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                draw:
                    icons:
                        size: [[4,5px],[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 6
                        text:
                            font:
                                size: [[2,11px],[6,17px],[8,19px],[12,21px],[13,0px]]
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[2,11px],[6,17px],[8,19px],[12,21x],[13,0px]]
                z9-bold:
                    filter: { $zoom: { min: 9 } }
                    draw:
                        icons: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 5
                        text-blend-order:
                            priority: 5
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                draw:
                    icons:
                        size: [[4,5px],[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 7
                        text:
                            font:
                                fill: global.text_fill
                                size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                z9-semibold:
                    filter: { $zoom: { min: 9 } }
                    draw:
                        icons: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 6
                        text-blend-order:
                            priority: 6
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                draw:
                    icons:
                        size: [[4,5px],[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 9
                        text:
                            font:
                                size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[4,10px],[6,16px],[8,18px],[12,20px],[13,0px]]
                z9-semibold:
                    filter: { $zoom: { min: 9 } }
                    draw:
                        icons: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,8px],[11,0px]]
                            sprite: capital-l
                            priority: 8
                        text-blend-order:
                            priority: 8
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                draw:
                    icons:
                        size: [[8,6px],[9,0px]]
                        sprite: townspot-m-rev
                        priority: 11
                        text:
                            font:
                                size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
                z11-semibold:
                    filter: { $zoom: { min: 11 } }
                    draw:
                        icons: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 10
                        text-blend-order:
                            priority: 10
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                draw:
                    icons:
                        size: [[8,6px],[9,6px],[10,6px],[11,0px]]
                        sprite: townspot-m-rev
                        priority: 13
                        collide: false  #debug
                        text:
                            font:
                                size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
                z11-semibold:
                    filter: { $zoom: { min: 11 } }
                    draw:
                        icons: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 12
                        text-blend-order:
                            priority: 12
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                draw:
                    icons:
                        size: [[8,6px],[9,6px],[10,6px],[11,0px]]
                        sprite: townspot-m-rev
                        priority: 15
                        text:
                            font:
                                size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                z11-semibold:
                    filter: { $zoom: { min: 11 } }
                    draw:
                        icons: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,6px],[11,0px]]
                            sprite: capital-m
                            priority: 14
                        text-blend-order:
                            priority: 14
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                draw:
                    icons:
                        size: [[8,5px],[9,5px],[10,6px],[11,0px]]
                        sprite: townspot-s-rev
                        priority: 17
                        text:
                            font:
                                size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
                z11-semibold:
                    filter: { $zoom: { min: 11 } }
                    draw:
                        icons: { text: { font: { weight: 600 } } }
                        text-blend-order: { font: { weight: 600 } }
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-m
                            priority: 16
                        text-blend-order:
                            priority: 16
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                draw:
                    icons:
                        size: [[8,5px],[9,5px],[10,5px],[11,0px]]
                        sprite: townspot-s-rev
                        priority: 19
                        text:
                            font:
                                size: [[9,10px],[14,12px],[15,0px]]
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[9,10px],[14,12px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 18
                        text-blend-order:
                            priority: 18
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 21
                        text:
                            font:
                                fill: global.text_fill
                                size: [[9,10px],[14,12px],[15,0px]]
                    text-blend-order:
                        priority: 21
                        font:
                            fill: global.text_fill
                            size: [[9,10px],[14,12px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 20
                        text-blend-order:
                            priority: 20
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 23
                        text:
                            font:
                                fill: global.text_fill
                                size: [[9,10px],[14,12px],[15,0px]]
                    text-blend-order:
                        priority: 23
                        font:
                            fill: global.text_fill
                            size: [[9,10px],[14,12px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 22
                        text-blend-order:
                            priority: 22
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 25
                        text:
                            font:
                                fill: global.text_fill
                                size: [[9,10px],[14,12px],[15,0px]]
                    text-blend-order:
                        priority: 25
                        font:
                            fill: global.text_fill
                            size: [[9,10px],[14,12px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 24
                        text-blend-order:
                            priority: 24
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 27
                        text:
                            font:
                                fill: global.text_fill
                                size: [[9,10px],[14,12px],[15,0px]]
                    text-blend-order:
                        priority: 27
                        font:
                            fill: global.text_fill
                            size: [[9,10px],[14,12px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 26
                        text-blend-order:
                            priority: 26
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                draw:
                    icons:
                        size: [[8,4px],[9,4px],[10,4px],[11,0px]]
                        sprite: townspot-xs-rev
                        priority: 28
                        text:
                            font:
                                fill: global.text_fill
                                size: [[9,10px],[14,11px],[15,0px]]
                    text-blend-order:
                        priority: 28
                        font:
                            fill: global.text_fill
                            size: [[9,10px],[14,11px],[15,0px]]
                capital:
                    filter: { country_capital: true, $zoom: { min: 5 } }
                    draw:
                        icons:
                            size: [[10,5px],[11,0px]]
                            sprite: capital-s
                            priority: 27
                        text-blend-order:
                            priority: 27


        neighbourhoods:
            filter:
                kind:
                    - macrohood
                    - neighbourhood
                    - borough
                all:
                    - name: true
                $zoom: { min: 11, max: 16 }
                is_landuse_aoi: false
            draw:
                text-blend-order:
                    visible: global.text_visible_neighbourhoods
                    priority: 18
                    buffer: 0px
                    text_wrap: true
                    max_lines: 2
                    font:
                        fill: global.text_fill
                        weight: 600
                        transform: uppercase
                        stroke: { color: global.text_outline, width: 2 }
                        size: [[11,9px],[12,9px],[13,11px],[14,12px],[15,14px]]
                        fill: global.text_fill_neighborhoods
            # neighborhoods-default:
            #     filter:
            #         all:
            #             - name: true
            #             - $zoom: [11]
            #             - max_zoom: { min: 12 }
            #             #- kind_tile_rank: { max: 6 }
            #     draw:
            #         text-blend-order:
            #             font:
            #                 size: 9px
            #                 stroke: { color: global.text_outline }
            # neighborhood-rank1:
            #     filter:
            #         all:
            #             - name: true
            #             - kind: [macrohood, neighbourhood]
            #             # - $zoom: [11, 12, 13, 14, 15, 16]
            #             # - max_zoom: { min: 15 }
            #             - is_landuse_aoi: false
            #             - kind_tile_rank: 1
            #     draw:
            #         text-blend-order:
            #             priority: 18
            #             text_wrap: 10
            #             visible: global.text_visible_neighbourhoods_e
            #             font:
            #                 size: 14px
            #                 weight: 600
            #                 transform: uppercase
            #                 stroke: { color: global.text_outline, width: 2 }
